!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AA	.//test/main_client.cpp	/^struct AA$/;"	s	file:
AA::a	.//test/main_client.cpp	/^    int a;$/;"	m	struct:AA	file:	access:public
AA::b	.//test/main_client.cpp	/^    int b;$/;"	m	struct:AA	file:	access:public
ARCHITECTURE_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
AT	.//test/main_server.cpp	/^class AT : public kit::Ref$/;"	c	file:	inherits:kit::Ref
App	.//test/app_client.cpp	/^App::App()$/;"	f	class:App	signature:()
App	.//test/app_client.h	/^    App();$/;"	p	class:App	access:public	signature:()
App	.//test/app_client.h	/^class App : public kit::Application$/;"	c	inherits:kit::Application
App	.//test/app_server.cpp	/^App::App()$/;"	f	class:App	signature:()
App	.//test/app_server.h	/^    App();$/;"	p	class:App	access:public	signature:()
App	.//test/app_server.h	/^class App : public kit::Application$/;"	c	inherits:kit::Application
App::App	.//test/app_client.cpp	/^App::App()$/;"	f	class:App	signature:()
App::App	.//test/app_client.h	/^    App();$/;"	p	class:App	access:public	signature:()
App::App	.//test/app_server.cpp	/^App::App()$/;"	f	class:App	signature:()
App::App	.//test/app_server.h	/^    App();$/;"	p	class:App	access:public	signature:()
App::client_	.//test/app_client.h	/^    kit::Client* client_;$/;"	m	class:App	access:private
App::logic	.//test/app_client.cpp	/^void App::logic()$/;"	f	class:App	signature:()
App::logic	.//test/app_client.h	/^    virtual void logic();$/;"	p	class:App	access:public	signature:()
App::logic	.//test/app_server.cpp	/^void App::logic()$/;"	f	class:App	signature:()
App::logic	.//test/app_server.h	/^    virtual void logic();$/;"	p	class:App	access:public	signature:()
App::run	.//test/app_client.cpp	/^void App::run()$/;"	f	class:App	signature:()
App::run	.//test/app_client.h	/^    virtual void run();$/;"	p	class:App	access:public	signature:()
App::run	.//test/app_server.cpp	/^void App::run()$/;"	f	class:App	signature:()
App::run	.//test/app_server.h	/^    virtual void run();$/;"	p	class:App	access:public	signature:()
App::server_	.//test/app_server.h	/^    kit::Server* server_;$/;"	m	class:App	access:private
App::spareLogic	.//test/app_client.cpp	/^uint32_t App::spareLogic(uint32_t spare_time)$/;"	f	class:App	signature:(uint32_t spare_time)
App::spareLogic	.//test/app_client.h	/^    virtual uint32_t spareLogic(uint32_t spare_time);$/;"	p	class:App	access:public	signature:(uint32_t spare_time)
App::spareLogic	.//test/app_server.cpp	/^uint32_t App::spareLogic(uint32_t spare_time)$/;"	f	class:App	signature:(uint32_t spare_time)
App::spareLogic	.//test/app_server.h	/^    virtual uint32_t spareLogic(uint32_t spare_time);$/;"	p	class:App	access:public	signature:(uint32_t spare_time)
App::stop	.//test/app_client.cpp	/^void App::stop()$/;"	f	class:App	signature:()
App::stop	.//test/app_client.h	/^    virtual void stop();$/;"	p	class:App	access:public	signature:()
App::stop	.//test/app_server.cpp	/^void App::stop()$/;"	f	class:App	signature:()
App::stop	.//test/app_server.h	/^    virtual void stop();$/;"	p	class:App	access:public	signature:()
App::~App	.//test/app_client.cpp	/^App::~App()$/;"	f	class:App	signature:()
App::~App	.//test/app_client.h	/^    virtual ~App();$/;"	p	class:App	access:public	signature:()
App::~App	.//test/app_server.cpp	/^App::~App()$/;"	f	class:App	signature:()
App::~App	.//test/app_server.h	/^    virtual ~App();$/;"	p	class:App	access:public	signature:()
Application	.//Application.cpp	/^Application::Application()$/;"	f	class:kit::Application	signature:()
Application	.//Application.h	/^    Application();$/;"	p	class:kit::Application	access:public	signature:()
Application	.//Application.h	/^class Application$/;"	c	namespace:kit
Array	.//base/Array.h	/^    Array() : count_(0), head_(-1), tail_(-1), pos_(-1)$/;"	f	class:kit::Array	access:public	signature:()
Array	.//base/Array.h	/^class Array$/;"	c	namespace:kit
BUFFER_QUEUE_CNT	.//base/BufferPool.h	/^const int32_t BUFFER_QUEUE_CNT = 8;$/;"	m	namespace:kit
Buffer	.//base/Buffer.cpp	/^Buffer::Buffer()$/;"	f	class:kit::Buffer	signature:()
Buffer	.//base/Buffer.h	/^    Buffer();$/;"	p	class:kit::Buffer	access:public	signature:()
Buffer	.//base/Buffer.h	/^class Buffer : public Ref$/;"	c	namespace:kit	inherits:Ref
BufferPool	.//base/BufferPool.cpp	/^BufferPool::BufferPool()$/;"	f	class:kit::BufferPool	signature:()
BufferPool	.//base/BufferPool.h	/^    BufferPool();$/;"	p	class:kit::BufferPool	access:public	signature:()
BufferPool	.//base/BufferPool.h	/^class BufferPool$/;"	c	namespace:kit
BufferQue	.//base/BufferPool.h	/^    typedef Queue<Buffer*, 200> BufferQue;$/;"	t	class:kit::BufferPool	access:private
BufferQue	.//network/Socket.h	/^    typedef Queue<Buffer*, 200> BufferQue;$/;"	t	class:kit::ISocket	access:private
CLIENT_EVENT_CNT	.//network/platform/linux/Client_linux.h	/^const uint16_t CLIENT_EVENT_CNT = 128;$/;"	m	namespace:kit
COMPILER_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION_INTERNAL	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_MAJOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
CONNECTION_LIMIT	.//network/Server.h	/^const uint16_t CONNECTION_LIMIT = 0x7FFF;$/;"	m	namespace:kit
CXX_STD	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define CXX_STD /;"	d	file:
CXX_STD	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define CXX_STD /;"	d	file:
C_DIALECT	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT /;"	d	file:
C_DIALECT	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT$/;"	d	file:
C_DIALECT	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define C_DIALECT /;"	d	file:
C_DIALECT	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT /;"	d	file:
C_DIALECT	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT$/;"	d	file:
C_DIALECT	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define C_DIALECT /;"	d	file:
Client	.//network/platform/linux/Client_linux.cpp	/^Client::Client()$/;"	f	class:kit::Client	signature:()
Client	.//network/platform/linux/Client_linux.h	/^	Client();$/;"	p	class:kit::Client	access:public	signature:()
Client	.//network/platform/linux/Client_linux.h	/^class Client : public IClient$/;"	c	namespace:kit	inherits:IClient
DBG	.//base/Logger.h	/^#define DBG /;"	d
DEC	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DEC	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DEFAULT_FRAME_RATE	.//Application.cpp	/^#define DEFAULT_FRAME_RATE /;"	d	file:
DSOCKERR	.//network/Socket.h	/^#define DSOCKERR	/;"	d
ERR	.//base/Logger.h	/^#define ERR /;"	d
EventQue	.//network/Server.h	/^    typedef Queue<PollEvent, SERVER_EVENT_CNT> EventQue;$/;"	t	class:kit::IServer	access:protected
EventQue	.//network/platform/linux/Client_linux.h	/^    typedef Queue<PollEvent,CLIENT_EVENT_CNT> EventQue;$/;"	t	class:kit::Client	access:private
HEX	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
HEX	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
HLElement	.//base/HashList.h	/^typedef struct HLElement$/;"	s	namespace:kit
HashListDef	.//base/HashList.h	/^} HashListElement, HashListDef, *HashListT;$/;"	t	namespace:kit	typeref:struct:kit::HLElement
HashListElement	.//base/HashList.h	/^} HashListElement, HashListDef, *HashListT;$/;"	t	namespace:kit	typeref:struct:kit::HLElement
HashListT	.//base/HashList.h	/^} HashListElement, HashListDef, *HashListT;$/;"	t	namespace:kit	typeref:struct:kit::HLElement
HashList_addElement	.//base/HashList.cpp	/^void HashList_addElement(HashListT hl, int index, Ref* p)$/;"	f	namespace:kit	signature:(HashListT hl, int index, Ref* p)
HashList_addElement	.//base/HashList.h	/^void HashList_addElement(HashListT hl, int index, Ref* p);$/;"	p	namespace:kit	signature:(HashListT hl, int index, Ref* p)
HashList_count	.//base/HashList.h	/^inline int HashList_count(HashListT hl)$/;"	f	namespace:kit	signature:(HashListT hl)
HashList_delElement	.//base/HashList.cpp	/^void HashList_delElement(HashListT hl, int index)$/;"	f	namespace:kit	signature:(HashListT hl, int index)
HashList_delElement	.//base/HashList.h	/^void HashList_delElement(HashListT hl, int index);$/;"	p	namespace:kit	signature:(HashListT hl, int index)
HashList_getElement	.//base/HashList.h	/^inline Ref* HashList_getElement(HashListT hl, int index)$/;"	f	namespace:kit	signature:(HashListT hl, int index)
HashList_init	.//base/HashList.cpp	/^void HashList_init(HashListT hl, int size)$/;"	f	namespace:kit	signature:(HashListT hl, int size)
HashList_init	.//base/HashList.h	/^void HashList_init(HashListT hl, int size);$/;"	p	namespace:kit	signature:(HashListT hl, int size)
HashList_length	.//base/HashList.h	/^inline int HashList_length(HashListT hl)$/;"	f	namespace:kit	signature:(HashListT hl)
HashList_next	.//base/HashList.h	/^inline int HashList_next(HashListT hl, int index)$/;"	f	namespace:kit	signature:(HashListT hl, int index)
HashList_print	.//base/HashList.cpp	/^void HashList_print(HashListT hl)$/;"	f	namespace:kit	signature:(HashListT hl)
HashList_print	.//base/HashList.h	/^void HashList_print(HashListT hl);$/;"	p	namespace:kit	signature:(HashListT hl)
IClient	.//network/Client.cpp	/^IClient::IClient()$/;"	f	class:kit::IClient	signature:()
IClient	.//network/Client.h	/^	IClient();$/;"	p	class:kit::IClient	access:public	signature:()
IClient	.//network/Client.h	/^class IClient : public Ref$/;"	c	namespace:kit	inherits:Ref
ID_VOID_MAIN	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
ID_VOID_MAIN	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
IServer	.//network/Server.cpp	/^IServer::IServer()$/;"	f	class:kit::IServer	signature:()
IServer	.//network/Server.h	/^	IServer();$/;"	p	class:kit::IServer	access:public	signature:()
IServer	.//network/Server.h	/^class IServer : public Ref$/;"	c	namespace:kit	inherits:Ref
ISockAddr	.//network/SockAddr.cpp	/^ISockAddr::ISockAddr()$/;"	f	class:kit::ISockAddr	signature:()
ISockAddr	.//network/SockAddr.h	/^    ISockAddr();$/;"	p	class:kit::ISockAddr	access:public	signature:()
ISockAddr	.//network/SockAddr.h	/^class ISockAddr : public Ref$/;"	c	namespace:kit	inherits:Ref
ISocket	.//network/Socket.cpp	/^ISocket::ISocket()$/;"	f	class:kit::ISocket	signature:()
ISocket	.//network/Socket.h	/^	ISocket();$/;"	p	class:kit::ISocket	access:public	signature:()
ISocket	.//network/Socket.h	/^class ISocket : public Ref$/;"	c	namespace:kit	inherits:Ref
Item	.//base/Array.h	/^        Item(): next(-2) {}$/;"	f	struct:kit::Array::Item	access:public	signature:()
Item	.//base/Array.h	/^    struct Item$/;"	s	class:kit::Array	access:private
Item	.//base/List.h	/^    struct Item $/;"	s	class:kit::List	access:private
KIT_AF_INET	.//network/netsys.h	/^#define KIT_AF_INET /;"	d
KIT_BEGIN	.//base/debugfunc.h	/^#define KIT_BEGIN(/;"	d
KIT_CREATE_FUNC	.//base/Buffer.h	/^    KIT_CREATE_FUNC(Buffer);$/;"	p	class:kit::Buffer	access:public	signature:(Buffer)
KIT_CREATE_FUNC	.//base/Ref.h	/^#define KIT_CREATE_FUNC(/;"	d
KIT_END	.//base/debugfunc.h	/^#define KIT_END(/;"	d
KIT_POLLERR	.//network/netsys.h	/^#define KIT_POLLERR /;"	d
KIT_POLLIN	.//network/netsys.h	/^#define KIT_POLLIN /;"	d
KIT_POLLOUT	.//network/netsys.h	/^#define KIT_POLLOUT /;"	d
KIT_RUN	.//base/debugfunc.h	/^#define KIT_RUN(/;"	d
KIT_SOCK_STREAM	.//network/netsys.h	/^#define KIT_SOCK_STREAM /;"	d
LINUX_TIME_HIGH_PRECISION	.//base/kitsys.h	/^#define LINUX_TIME_HIGH_PRECISION /;"	d
LOG	.//base/Logger.h	/^#define LOG /;"	d
LOG_TYPE_DBG	.//base/Logger.h	/^    LOG_TYPE_DBG,   \/\/调试日志$/;"	e	enum:kit::__anon2
LOG_TYPE_ERR	.//base/Logger.h	/^    LOG_TYPE_ERR,   \/\/错误日志$/;"	e	enum:kit::__anon2
LOG_TYPE_LOG	.//base/Logger.h	/^    LOG_TYPE_LOG,   \/\/普通日志$/;"	e	enum:kit::__anon2
LOG_TYPE_SQL	.//base/Logger.h	/^    LOG_TYPE_SQL,   \/\/数据库日志$/;"	e	enum:kit::__anon2
List	.//base/List.h	/^    List(): head_(0), tail_(0), count_(0)$/;"	f	class:kit::List	access:public	signature:()
List	.//base/List.h	/^class List$/;"	c	namespace:kit
Logger	.//base/Logger.cpp	/^Logger::Logger()$/;"	f	class:kit::Logger	signature:()
Logger	.//base/Logger.h	/^    Logger();$/;"	p	class:kit::Logger	access:public	signature:()
Logger	.//base/Logger.h	/^class Logger$/;"	c	namespace:kit
LoggerAPI	.//base/Logger.h	/^    typedef void (Logger::* LoggerAPI)(const char* format, ...);$/;"	t	class:kit::Logger	access:public
MAX_LISTEN	.//network/Client.cpp	/^const int32_t MAX_LISTEN = 50;$/;"	m	namespace:kit	file:
MAX_LISTEN	.//network/Server.cpp	/^const int32_t MAX_LISTEN = 50;$/;"	m	namespace:kit	file:
MAX_LISTEN	.//network/platform/linux/Client_linux.cpp	/^const int32_t MAX_LISTEN = 50;$/;"	m	namespace:kit	file:
MAX_LISTEN	.//network/platform/linux/Server_linux.cpp	/^const int32_t MAX_LISTEN = 50;$/;"	m	namespace:kit	file:
MAX_LISTEN	.//network/platform/win/Server.cpp	/^const int32_t MAX_LISTEN = 50;$/;"	m	namespace:kit	file:
MAX_LOG_BUFFER_LEN	.//base/Logger.h	/^const int MAX_LOG_BUFFER_LEN = 1024 * 16;$/;"	m	namespace:kit
MAX_LOG_TYPE	.//base/Logger.h	/^    MAX_LOG_TYPE,$/;"	e	enum:kit::__anon2
NULL	.//base/kitsys.h	/^#define NULL /;"	d
PACKET_HEADER_SIZE	.//network/Packet.h	/^const uint32_t PACKET_HEADER_SIZE = sizeof(PacketHeader);$/;"	m	namespace:kit
PACKET_MAX_SIZE	.//network/Packet.h	/^const uint32_t PACKET_MAX_SIZE = 0xFFFF;$/;"	m	namespace:kit
PACKET_SIZE	.//network/netsys.h	/^const uint32_t PACKET_SIZE 512;$/;"	m	namespace:kit
PLATFORM_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
PacketHeader	.//network/Packet.h	/^struct PacketHeader$/;"	s	namespace:kit
PollEvent	.//network/netsys.h	/^struct PollEvent {$/;"	s	namespace:kit
PoolVec	.//base/RefPool.h	/^    typedef std::vector<RefPool*> PoolVec;$/;"	t	class:kit::RefPoolManager	access:private
Queue	.//base/Queue.h	/^    Queue(): count_(0), head_(0), tail_(0)$/;"	f	class:kit::Queue	access:public	signature:()
Queue	.//base/Queue.h	/^class Queue$/;"	c	namespace:kit
Ref	.//base/Ref.cpp	/^Ref::Ref()$/;"	f	class:kit::Ref	signature:()
Ref	.//base/Ref.h	/^    Ref();$/;"	p	class:kit::Ref	access:protected	signature:()
Ref	.//base/Ref.h	/^class Ref$/;"	c	namespace:kit
RefPool	.//base/RefPool.cpp	/^RefPool::RefPool()$/;"	f	class:kit::RefPool	signature:()
RefPool	.//base/RefPool.h	/^    RefPool();$/;"	p	class:kit::RefPool	access:public	signature:()
RefPool	.//base/RefPool.h	/^class RefPool$/;"	c	namespace:kit
RefPoolManager	.//base/RefPool.cpp	/^RefPoolManager::RefPoolManager()$/;"	f	class:kit::RefPoolManager	signature:()
RefPoolManager	.//base/RefPool.h	/^    RefPoolManager();$/;"	p	class:kit::RefPoolManager	access:public	signature:()
RefPoolManager	.//base/RefPool.h	/^class RefPoolManager$/;"	c	namespace:kit
RefVec	.//base/RefPool.h	/^    typedef std::vector<Ref*> RefVec;$/;"	t	class:kit::RefPool	access:private
SERVER_EVENT_CNT	.//network/Server.h	/^const uint16_t SERVER_EVENT_CNT = 512;$/;"	m	namespace:kit
SIMULATE_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SQL	.//base/Logger.h	/^#define SQL /;"	d
STRINGIFY	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
Server	.//network/platform/linux/Server_linux.cpp	/^Server::Server()$/;"	f	class:kit::Server	signature:()
Server	.//network/platform/linux/Server_linux.h	/^	Server();$/;"	p	class:kit::Server	access:public	signature:()
Server	.//network/platform/linux/Server_linux.h	/^class Server : public IServer$/;"	c	namespace:kit	inherits:IServer
Server	.//network/platform/win/Server.cpp	/^Server::Server()$/;"	f	class:kit::Server	signature:()
Singleton	.//base/Singleton.h	/^class Singleton$/;"	c	namespace:kit
SockAddr	.//network/platform/linux/SockAddr_linux.h	/^class SockAddr : public ISockAddr$/;"	c	namespace:kit	inherits:ISockAddr
SockAddr	.//network/platform/win/SockAddr.cpp	/^SockAddr::SockAddr()$/;"	f	class:kit::SockAddr	signature:()
Socket	.//network/platform/linux/Socket_linux.h	/^class Socket : public ISocket$/;"	c	namespace:kit	inherits:ISocket
Socket	.//network/platform/win/Socket.cpp	/^Socket::Socket()$/;"	f	class:kit::Socket	signature:()
Thread	.//base/Thread.h	/^    Thread();$/;"	p	class:kit::Thread	access:public	signature:()
Thread	.//base/Thread.h	/^class Thread : public Ref$/;"	c	namespace:kit	inherits:Ref
__APP_H__	.//test/app_client.h	/^#define __APP_H__$/;"	d
__APP_H__	.//test/app_server.h	/^#define __APP_H__$/;"	d
__DEBUG_FUNC_H__	.//base/debugfunc.h	/^#define __DEBUG_FUNC_H__$/;"	d
__GEAR_KIT_H__	.//gearkit.h	/^#define __GEAR_KIT_H__$/;"	d
__KIT_APPLICATION_H__	.//Application.h	/^#define __KIT_APPLICATION_H__$/;"	d
__KIT_ARRAY_H__	.//base/Array.h	/^#define __KIT_ARRAY_H__$/;"	d
__KIT_BASE_H__	.//base/base.h	/^#define __KIT_BASE_H__$/;"	d
__KIT_BUFFER_H__	.//base/Buffer.h	/^#define __KIT_BUFFER_H__$/;"	d
__KIT_BUFFER_POOL_H__	.//base/BufferPool.h	/^#define __KIT_BUFFER_POOL_H__$/;"	d
__KIT_CLIENT_H__	.//network/Client.h	/^#define __KIT_CLIENT_H__$/;"	d
__KIT_CLIENT_LINUX_H__	.//network/platform/linux/Client_linux.h	/^#define __KIT_CLIENT_LINUX_H__$/;"	d
__KIT_HASH_LIST_H__	.//base/HashList.h	/^#define __KIT_HASH_LIST_H__$/;"	d
__KIT_LIST_H__	.//base/List.h	/^#define __KIT_LIST_H__$/;"	d
__KIT_LOGGER_H__	.//base/Logger.h	/^#define __KIT_LOGGER_H__$/;"	d
__KIT_NETWORK_H__	.//network/network.h	/^#define __KIT_NETWORK_H__$/;"	d
__KIT_NET_SYS_H__	.//network/netsys.h	/^#define __KIT_NET_SYS_H__$/;"	d
__KIT_PACKET_H__	.//network/Packet.h	/^#define __KIT_PACKET_H__$/;"	d
__KIT_QUEUE_H__	.//base/Queue.h	/^#define __KIT_QUEUE_H__$/;"	d
__KIT_REF_H__	.//base/Ref.h	/^#define __KIT_REF_H__$/;"	d
__KIT_REF_POLL_H__	.//base/RefPool.h	/^#define __KIT_REF_POLL_H__$/;"	d
__KIT_SERVER_H__	.//network/Server.h	/^#define __KIT_SERVER_H__$/;"	d
__KIT_SERVER_LINUX_H__	.//network/platform/linux/Server_linux.h	/^#define __KIT_SERVER_LINUX_H__$/;"	d
__KIT_SINGLETON_H__	.//base/Singleton.h	/^#define __KIT_SINGLETON_H__$/;"	d
__KIT_SOCKET_H__	.//network/Socket.h	/^#define __KIT_SOCKET_H__$/;"	d
__KIT_SOCKET_LINUX_H__	.//network/platform/linux/Socket_linux.h	/^#define __KIT_SOCKET_LINUX_H__$/;"	d
__KIT_SOCK_ADDR_H__	.//network/SockAddr.h	/^#define __KIT_SOCK_ADDR_H__$/;"	d
__KIT_SOCK_ADDR_LINUX_H__	.//network/platform/linux/SockAddr_linux.h	/^#define __KIT_SOCK_ADDR_LINUX_H__$/;"	d
__KIT_SYS_H__	.//base/kitsys.h	/^#define __KIT_SYS_H__$/;"	d
__KIT_THREAD_H__	.//base/Thread.h	/^#define __KIT_THREAD_H__$/;"	d
a	.//test/main_client.cpp	/^    int a;$/;"	m	struct:AA	file:	access:public
accept	.//network/Socket.cpp	/^int32_t ISocket::accept(SockAddr* addr)$/;"	f	class:kit::ISocket	signature:(SockAddr* addr)
accept	.//network/Socket.h	/^	int32_t accept(SockAddr* addr);$/;"	p	class:kit::ISocket	access:public	signature:(SockAddr* addr)
accept	.//network/platform/win/Socket.cpp	/^int32_t Socket::accept(sockaddr* addr)$/;"	f	class:kit::Socket	signature:(sockaddr* addr)
active_	.//network/Client.h	/^    bool active_;$/;"	m	class:kit::IClient	access:protected
active_	.//network/Server.h	/^    bool active_;$/;"	m	class:kit::IServer	access:protected
add	.//base/Array.h	/^    void add(int index, const Type& val)$/;"	f	class:kit::Array	access:public	signature:(int index, const Type& val)
addCtrl	.//network/platform/linux/Client_linux.cpp	/^int32_t Client::addCtrl(int32_t fd, int32_t events)$/;"	f	class:kit::Client	signature:(int32_t fd, int32_t events)
addCtrl	.//network/platform/linux/Client_linux.h	/^    int32_t addCtrl(int32_t fd, int32_t events);$/;"	p	class:kit::Client	access:private	signature:(int32_t fd, int32_t events)
addCtrl	.//network/platform/linux/Server_linux.cpp	/^int32_t Server::addCtrl(int32_t fd, int32_t events)$/;"	f	class:kit::Server	signature:(int32_t fd, int32_t events)
addCtrl	.//network/platform/linux/Server_linux.h	/^    int32_t addCtrl(int32_t fd, int32_t events);$/;"	p	class:kit::Server	access:private	signature:(int32_t fd, int32_t events)
addRef	.//base/RefPool.cpp	/^void RefPool::addRef(Ref* ref)$/;"	f	class:kit::RefPool	signature:(Ref* ref)
addRef	.//base/RefPool.h	/^    void addRef(Ref* ref);$/;"	p	class:kit::RefPool	access:public	signature:(Ref* ref)
addSocket	.//network/Server.cpp	/^int32_t IServer::addSocket(int32_t fd, Socket* sock)$/;"	f	class:kit::IServer	signature:(int32_t fd, Socket* sock)
addSocket	.//network/Server.h	/^    virtual int32_t addSocket(int32_t fd, Socket* sock = NULL);$/;"	p	class:kit::IServer	access:protected	signature:(int32_t fd, Socket* sock = NULL)
addr_	.//network/SockAddr.h	/^    sockaddr* addr_;$/;"	m	class:kit::ISockAddr	access:protected
addr_	.//network/Socket.h	/^    SockAddr* addr_;$/;"	m	class:kit::ISocket	access:protected
api_table_	.//base/Logger.h	/^    LoggerAPI api_table_[MAX_LOG_TYPE];$/;"	m	class:kit::Logger	access:private
array_	.//base/Array.h	/^    Item array_[Length];$/;"	m	class:kit::Array	access:private
autoRelease	.//base/Ref.cpp	/^Ref* Ref::autoRelease()$/;"	f	class:kit::Ref	signature:()
autoRelease	.//base/Ref.h	/^    Ref* autoRelease();$/;"	p	class:kit::Ref	access:public	signature:()
b	.//test/main_client.cpp	/^    int b;$/;"	m	struct:AA	file:	access:public
begine_time_	.//Application.h	/^    uint32_t begine_time_;$/;"	m	class:kit::Application	access:private
bind	.//network/Socket.cpp	/^int32_t ISocket::bind(SockAddr* addr)$/;"	f	class:kit::ISocket	signature:(SockAddr* addr)
bind	.//network/Socket.h	/^	int32_t bind(SockAddr* addr);$/;"	p	class:kit::ISocket	access:public	signature:(SockAddr* addr)
bind	.//network/platform/win/Socket.cpp	/^int32_t Socket::bind(const sockaddr* addr)$/;"	f	class:kit::Socket	signature:(const sockaddr* addr)
clear	.//base/Array.h	/^    void clear()$/;"	f	class:kit::Array	access:public	signature:()
clear	.//base/RefPool.cpp	/^void RefPool::clear()$/;"	f	class:kit::RefPool	signature:()
clear	.//base/RefPool.h	/^    void clear();$/;"	p	class:kit::RefPool	access:public	signature:()
client_	.//test/app_client.h	/^    kit::Client* client_;$/;"	m	class:App	access:private
close	.//network/Socket.cpp	/^void ISocket::close()$/;"	f	class:kit::ISocket	signature:()
close	.//network/Socket.h	/^	void close();$/;"	p	class:kit::ISocket	access:public	signature:()
close	.//network/platform/win/Socket.cpp	/^void Socket::close()$/;"	f	class:kit::Socket	signature:()
connect	.//network/Socket.cpp	/^int32_t ISocket::connect(SockAddr* addr)$/;"	f	class:kit::ISocket	signature:(SockAddr* addr)
connect	.//network/Socket.h	/^	int32_t connect(SockAddr* addr);$/;"	p	class:kit::ISocket	access:public	signature:(SockAddr* addr)
connect	.//network/platform/win/Socket.cpp	/^int32_t Socket::connect(const sockaddr* addr)$/;"	f	class:kit::Socket	signature:(const sockaddr* addr)
const	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
const	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
count	.//base/Array.h	/^    int count() const { return count_; }$/;"	f	class:kit::Array	access:public	signature:() const
count	.//base/HashList.h	/^        int count[2]; \/\/0记录长度，1记录数组长度$/;"	m	union:kit::HLElement::__anon1	access:public
count	.//base/List.h	/^    int count() { return count_; }$/;"	f	class:kit::List	access:public	signature:()
count	.//base/Queue.h	/^    int count()$/;"	f	class:kit::Queue	access:public	signature:()
count_	.//base/Array.h	/^    int count_;$/;"	m	class:kit::Array	access:private
count_	.//base/List.h	/^    int count_;$/;"	m	class:kit::List	access:private
count_	.//base/Queue.h	/^    int count_;$/;"	m	class:kit::Queue	access:private
createBuffer	.//base/BufferPool.cpp	/^Buffer* BufferPool::createBuffer(uint32_t size)$/;"	f	class:kit::BufferPool	signature:(uint32_t size)
createBuffer	.//base/BufferPool.h	/^    Buffer* createBuffer(uint32_t size);$/;"	p	class:kit::BufferPool	access:public	signature:(uint32_t size)
cur_pool_	.//base/RefPool.h	/^    RefPool* cur_pool_;$/;"	m	class:kit::RefPoolManager	access:private
dealRecv	.//network/Socket.cpp	/^void ISocket::dealRecv()$/;"	f	class:kit::ISocket	signature:()
dealRecv	.//network/Socket.h	/^    void dealRecv();$/;"	p	class:kit::ISocket	access:public	signature:()
del	.//base/Array.h	/^    void del(int index)$/;"	f	class:kit::Array	access:public	signature:(int index)
delCtrl	.//network/platform/linux/Client_linux.cpp	/^int32_t Client::delCtrl(int32_t fd)$/;"	f	class:kit::Client	signature:(int32_t fd)
delCtrl	.//network/platform/linux/Client_linux.h	/^    int32_t delCtrl(int32_t fd);$/;"	p	class:kit::Client	access:private	signature:(int32_t fd)
delCtrl	.//network/platform/linux/Server_linux.cpp	/^int32_t Server::delCtrl(int32_t fd)$/;"	f	class:kit::Server	signature:(int32_t fd)
delCtrl	.//network/platform/linux/Server_linux.h	/^    int32_t delCtrl(int32_t fd);$/;"	p	class:kit::Server	access:private	signature:(int32_t fd)
delRef	.//base/RefPool.cpp	/^void RefPool::delRef(Ref* ref)$/;"	f	class:kit::RefPool	signature:(Ref* ref)
delRef	.//base/RefPool.h	/^    void delRef(Ref* ref);$/;"	p	class:kit::RefPool	access:public	signature:(Ref* ref)
delSocket	.//network/Server.cpp	/^int32_t IServer::delSocket(int32_t fd)$/;"	f	class:kit::IServer	signature:(int32_t fd)
delSocket	.//network/Server.h	/^    virtual int32_t delSocket(int32_t fd);$/;"	p	class:kit::IServer	access:protected	signature:(int32_t fd)
destroyBuffer	.//base/BufferPool.cpp	/^void BufferPool::destroyBuffer(Buffer* buffer)$/;"	f	class:kit::BufferPool	signature:(Buffer* buffer)
destroyBuffer	.//base/BufferPool.h	/^    void destroyBuffer(Buffer* buffer);$/;"	p	class:kit::BufferPool	access:public	signature:(Buffer* buffer)
doRecv	.//network/Socket.cpp	/^int32_t ISocket::doRecv()$/;"	f	class:kit::ISocket	signature:()
doRecv	.//network/Socket.h	/^    int32_t doRecv();$/;"	p	class:kit::ISocket	access:public	signature:()
doSend	.//network/Socket.cpp	/^int32_t ISocket::doSend()$/;"	f	class:kit::ISocket	signature:()
doSend	.//network/Socket.h	/^    int32_t doSend();$/;"	p	class:kit::ISocket	access:public	signature:()
erase	.//base/List.h	/^    bool erase(int index)$/;"	f	class:kit::List	access:public	signature:(int index)
event_que_	.//network/Server.h	/^    EventQue event_que_;$/;"	m	class:kit::IServer	access:protected
event_que_	.//network/platform/linux/Client_linux.h	/^    EventQue event_que_;$/;"	m	class:kit::Client	access:private
events	.//network/netsys.h	/^    int32_t events;$/;"	m	struct:kit::PollEvent	access:public
exists	.//base/Singleton.h	/^    static bool exists(void)$/;"	f	class:kit::Singleton	access:public	signature:(void)
fd	.//network/netsys.h	/^    int32_t fd;$/;"	m	struct:kit::PollEvent	access:public
features	.//test/client/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	.//test/server/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
frame_	.//Application.h	/^    uint32_t frame_;$/;"	m	class:kit::Application	access:protected
frame_delta_	.//Application.h	/^    uint32_t frame_delta_;$/;"	m	class:kit::Application	access:protected
frame_msec_	.//Application.h	/^    uint32_t frame_msec_;$/;"	m	class:kit::Application	access:protected
frame_rate_	.//Application.h	/^    uint32_t frame_rate_;$/;"	m	class:kit::Application	access:protected
front	.//base/List.h	/^    bool front(Type& value)$/;"	f	class:kit::List	access:public	signature:(Type& value)
front	.//base/Queue.h	/^    bool front(Type& value)$/;"	f	class:kit::Queue	access:public	signature:(Type& value)
g_BufPool	.//base/BufferPool.h	/^#define g_BufPool /;"	d
g_RefPool	.//base/RefPool.h	/^#define g_RefPool /;"	d
g_log	.//base/Logger.h	/^#define g_log /;"	d
get	.//base/Array.h	/^    bool get(int index, Type& val)$/;"	f	class:kit::Array	access:public	signature:(int index, Type& val)
getAPI	.//base/Logger.cpp	/^Logger::LoggerAPI Logger::getAPI(int t)$/;"	f	class:kit::Logger	signature:(int t)
getAPI	.//base/Logger.h	/^    LoggerAPI getAPI(int t);$/;"	p	class:kit::Logger	access:public	signature:(int t)
getAddr	.//network/Socket.h	/^    SockAddr* getAddr() const { return addr_; }$/;"	f	class:kit::ISocket	access:public	signature:() const
getCurrentPool	.//base/RefPool.h	/^    RefPool* getCurrentPool() const { return cur_pool_; }$/;"	f	class:kit::RefPoolManager	access:public	signature:() const
getErrno	.//network/Socket.cpp	/^int32_t ISocket::getErrno()$/;"	f	class:kit::ISocket	signature:()
getErrno	.//network/Socket.h	/^	int32_t getErrno();$/;"	p	class:kit::ISocket	access:public	signature:()
getErrno	.//network/platform/win/Socket.cpp	/^int32_t Socket::getErrno()$/;"	f	class:kit::Socket	signature:()
getFrame	.//Application.h	/^    uint32_t getFrame() const { return frame_; }$/;"	f	class:kit::Application	access:public	signature:() const
getFrameDelta	.//Application.h	/^    uint32_t getFrameDelta() const { return frame_delta_; }$/;"	f	class:kit::Application	access:public	signature:() const
getFrameRate	.//Application.h	/^    uint32_t getFrameRate() const { return frame_rate_; }$/;"	f	class:kit::Application	access:public	signature:() const
getHandle	.//network/Socket.h	/^	inline int32_t getHandle() const { return sock_; }$/;"	f	class:kit::ISocket	access:public	signature:() const
getOption	.//network/Socket.cpp	/^int32_t ISocket::getOption(int32_t level, int32_t optname, char* optval, int32_t* optlen)$/;"	f	class:kit::ISocket	signature:(int32_t level, int32_t optname, char* optval, int32_t* optlen)
getOption	.//network/Socket.h	/^	int32_t getOption(int32_t level, int32_t optname, char* optval, int32_t* optlen);$/;"	p	class:kit::ISocket	access:public	signature:(int32_t level, int32_t optname, char* optval, int32_t* optlen)
getOption	.//network/platform/win/Socket.cpp	/^int32_t Socket::getOption(int32_t level, int32_t optname, char* optval, int32_t* optlen)$/;"	f	class:kit::Socket	signature:(int32_t level, int32_t optname, char* optval, int32_t* optlen)
getReadableSize	.//base/Buffer.h	/^    uint32_t getReadableSize() const;$/;"	p	class:kit::Buffer	access:public	signature:() const
getReadableSize	.//base/Buffer.h	/^inline uint32_t Buffer::getReadableSize() const$/;"	f	class:kit::Buffer	signature:() const
getReferenceCount	.//base/Ref.h	/^    unsigned int getReferenceCount() const { return reference_count_; };$/;"	f	class:kit::Ref	access:public	signature:() const
getSize	.//base/Buffer.h	/^    uint32_t getSize() const;$/;"	p	class:kit::Buffer	access:public	signature:() const
getSize	.//base/Buffer.h	/^inline uint32_t Buffer::getSize() const$/;"	f	class:kit::Buffer	signature:() const
getSocket	.//network/Server.cpp	/^Socket* IServer::getSocket(int32_t fd)$/;"	f	class:kit::IServer	signature:(int32_t fd)
getSocket	.//network/Server.h	/^    Socket* getSocket(int32_t fd);$/;"	p	class:kit::IServer	access:protected	signature:(int32_t fd)
getTimeval	.//network/Client.h	/^    inline int32_t getTimeval() const { return timeval_; }$/;"	f	class:kit::IClient	access:public	signature:() const
getTimeval	.//network/Server.h	/^    inline int32_t getTimeval() const { return timeval_; }$/;"	f	class:kit::IServer	access:public	signature:() const
getWritableSize	.//base/Buffer.h	/^    uint32_t getWritableSize() const;$/;"	p	class:kit::Buffer	access:public	signature:() const
getWritableSize	.//base/Buffer.h	/^inline uint32_t Buffer::getWritableSize() const$/;"	f	class:kit::Buffer	signature:() const
getWrittenSize	.//base/Buffer.h	/^    uint32_t getWrittenSize() const;$/;"	p	class:kit::Buffer	access:public	signature:() const
getWrittenSize	.//base/Buffer.h	/^inline uint32_t Buffer::getWrittenSize() const$/;"	f	class:kit::Buffer	signature:() const
get_cpu_tick	.//base/kitsys.cpp	/^static uint64_t get_cpu_tick()$/;"	f	namespace:kit	signature:()
get_num_from_sysfile	.//base/kitsys.cpp	/^static int64_t get_num_from_sysfile( const char* _name, const char* _head )$/;"	f	namespace:kit	signature:( const char* _name, const char* _head )
handleEvents	.//network/platform/linux/Client_linux.cpp	/^void Client::handleEvents(int32_t events)$/;"	f	class:kit::Client	signature:(int32_t events)
handleEvents	.//network/platform/linux/Client_linux.h	/^    void handleEvents(int32_t events);$/;"	p	class:kit::Client	access:private	signature:(int32_t events)
handleSocket	.//network/platform/linux/Server_linux.cpp	/^int32_t Server::handleSocket(Socket* sock, int32_t events)$/;"	f	class:kit::Server	signature:(Socket* sock, int32_t events)
handleSocket	.//network/platform/linux/Server_linux.h	/^    int32_t handleSocket(Socket* sock, int32_t events);$/;"	p	class:kit::Server	access:private	signature:(Socket* sock, int32_t events)
head_	.//base/Array.h	/^    int head_;$/;"	m	class:kit::Array	access:private
head_	.//base/Buffer.h	/^    char* head_;$/;"	m	class:kit::Buffer	access:public
head_	.//base/List.h	/^    Item* head_;$/;"	m	class:kit::List	access:private
head_	.//base/Queue.h	/^    int head_;$/;"	m	class:kit::Queue	access:private
info_arch	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v
info_language_dialect_default	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_language_dialect_default	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v
info_language_dialect_default	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version_internal	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v
info_version_internal	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
info_version_internal	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v
info_version_internal	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
init	.//base/Buffer.cpp	/^void Buffer::init(uint32_t size)$/;"	f	class:kit::Buffer	signature:(uint32_t size)
init	.//base/Buffer.h	/^    void init(uint32_t size);$/;"	p	class:kit::Buffer	access:public	signature:(uint32_t size)
init	.//network/SockAddr.cpp	/^void ISockAddr::init(const char* ip, uint16_t port, uint16_t family)$/;"	f	class:kit::ISockAddr	signature:(const char* ip, uint16_t port, uint16_t family)
init	.//network/SockAddr.h	/^    virtual void init(const char* ip, uint16_t port, uint16_t family);$/;"	p	class:kit::ISockAddr	access:public	signature:(const char* ip, uint16_t port, uint16_t family)
init	.//network/Socket.cpp	/^void ISocket::init(int32_t family, int32_t type, int32_t protocol)$/;"	f	class:kit::ISocket	signature:(int32_t family, int32_t type, int32_t protocol)
init	.//network/Socket.cpp	/^void ISocket::init(int32_t sock)$/;"	f	class:kit::ISocket	signature:(int32_t sock)
init	.//network/Socket.cpp	/^void ISocket::init(void)$/;"	f	class:kit::ISocket	signature:(void)
init	.//network/Socket.h	/^	virtual void init(int32_t family, int32_t type, int32_t protocol);$/;"	p	class:kit::ISocket	access:public	signature:(int32_t family, int32_t type, int32_t protocol)
init	.//network/Socket.h	/^    virtual void init(int32_t sock);$/;"	p	class:kit::ISocket	access:public	signature:(int32_t sock)
init	.//network/Socket.h	/^    virtual void init(void);$/;"	p	class:kit::ISocket	access:public	signature:(void)
init	.//network/platform/linux/SockAddr_linux.cpp	/^void SockAddr::init(const char* ip, uint16_t port, uint16_t family)$/;"	f	class:kit::SockAddr	signature:(const char* ip, uint16_t port, uint16_t family)
init	.//network/platform/linux/SockAddr_linux.h	/^    virtual void init(const char* ip, uint16_t port, uint16_t family);$/;"	p	class:kit::SockAddr	access:public	signature:(const char* ip, uint16_t port, uint16_t family)
init	.//network/platform/win/SockAddr.cpp	/^void SockAddr::init(const char* ip, uint16_t port, uint16_t family)$/;"	f	class:kit::SockAddr	signature:(const char* ip, uint16_t port, uint16_t family)
init	.//network/platform/win/Socket.cpp	/^void Socket::init(int32_t family, int32_t type, int32_t protocol)$/;"	f	class:kit::Socket	signature:(int32_t family, int32_t type, int32_t protocol)
insert	.//base/List.h	/^    bool insert(int index, const Type& item)$/;"	f	class:kit::List	access:public	signature:(int index, const Type& item)
instance	.//base/Singleton.h	/^    inline static T* instance(void)$/;"	f	class:kit::Singleton	access:public	signature:(void)
instance_	.//base/Singleton.h	/^    static T* instance_;$/;"	m	class:kit::Singleton	access:protected
instance_	.//base/Singleton.h	/^template<typename T> T* Singleton<T>::instance_ = 0;$/;"	m	class:kit::Singleton
ioctl	.//network/Socket.cpp	/^int32_t ISocket::ioctl(unsigned long cmd, char* argp)$/;"	f	class:kit::ISocket	signature:(unsigned long cmd, char* argp)
ioctl	.//network/Socket.h	/^	int32_t ioctl(unsigned long cmd, char* argp);$/;"	p	class:kit::ISocket	access:public	signature:(unsigned long cmd, char* argp)
ioctl	.//network/platform/win/Socket.cpp	/^int32_t Socket::ioctl(unsigned long cmd, char* argp)$/;"	f	class:kit::Socket	signature:(unsigned long cmd, char* argp)
ip	.//network/SockAddr.h	/^    std::string ip;$/;"	m	class:kit::ISockAddr	access:public
join	.//base/Thread.h	/^    void join();$/;"	p	class:kit::Thread	access:public	signature:()
kit	.//Application.cpp	/^namespace kit {$/;"	n	file:
kit	.//Application.h	/^namespace kit {$/;"	n
kit	.//base/Array.h	/^namespace kit {$/;"	n
kit	.//base/Buffer.cpp	/^namespace kit {$/;"	n	file:
kit	.//base/Buffer.h	/^namespace kit {$/;"	n
kit	.//base/BufferPool.cpp	/^namespace kit {$/;"	n	file:
kit	.//base/BufferPool.h	/^namespace kit {$/;"	n
kit	.//base/HashList.cpp	/^namespace kit {$/;"	n	file:
kit	.//base/HashList.h	/^namespace kit {$/;"	n
kit	.//base/List.h	/^namespace kit {$/;"	n
kit	.//base/Logger.cpp	/^namespace kit {$/;"	n	file:
kit	.//base/Logger.h	/^namespace kit {$/;"	n
kit	.//base/Queue.h	/^namespace kit {$/;"	n
kit	.//base/Ref.cpp	/^namespace kit {$/;"	n	file:
kit	.//base/Ref.h	/^namespace kit {$/;"	n
kit	.//base/RefPool.cpp	/^namespace kit {$/;"	n	file:
kit	.//base/RefPool.h	/^namespace kit {$/;"	n
kit	.//base/Singleton.h	/^namespace kit {$/;"	n
kit	.//base/Thread.h	/^namespace kit {$/;"	n
kit	.//base/kitsys.cpp	/^namespace kit {$/;"	n	file:
kit	.//base/kitsys.h	/^namespace kit {$/;"	n
kit	.//network/Client.cpp	/^namespace kit {$/;"	n	file:
kit	.//network/Client.h	/^namespace kit {$/;"	n
kit	.//network/Packet.cpp	/^namespace kit {$/;"	n	file:
kit	.//network/Packet.h	/^namespace kit {$/;"	n
kit	.//network/Server.cpp	/^namespace kit {$/;"	n	file:
kit	.//network/Server.h	/^namespace kit {$/;"	n
kit	.//network/SockAddr.cpp	/^namespace kit {$/;"	n	file:
kit	.//network/SockAddr.h	/^namespace kit {$/;"	n
kit	.//network/Socket.cpp	/^namespace kit {$/;"	n	file:
kit	.//network/Socket.h	/^namespace kit {$/;"	n
kit	.//network/netsys.h	/^namespace kit {$/;"	n
kit	.//network/platform/linux/Client_linux.cpp	/^namespace kit {$/;"	n	file:
kit	.//network/platform/linux/Client_linux.h	/^namespace kit {$/;"	n
kit	.//network/platform/linux/Server_linux.cpp	/^namespace kit {$/;"	n	file:
kit	.//network/platform/linux/Server_linux.h	/^namespace kit {$/;"	n
kit	.//network/platform/linux/SockAddr_linux.cpp	/^namespace kit {$/;"	n	file:
kit	.//network/platform/linux/SockAddr_linux.h	/^namespace kit {$/;"	n
kit	.//network/platform/linux/Socket_linux.cpp	/^namespace kit {$/;"	n	file:
kit	.//network/platform/linux/Socket_linux.h	/^namespace kit {$/;"	n
kit	.//network/platform/win/Server.cpp	/^namespace kit {$/;"	n	file:
kit	.//network/platform/win/SockAddr.cpp	/^namespace kit {$/;"	n	file:
kit	.//network/platform/win/Socket.cpp	/^namespace kit {$/;"	n	file:
kit	.//test/app_client.h	/^namespace kit{$/;"	n
kit::Application	.//Application.h	/^class Application$/;"	c	namespace:kit
kit::Application::Application	.//Application.cpp	/^Application::Application()$/;"	f	class:kit::Application	signature:()
kit::Application::Application	.//Application.h	/^    Application();$/;"	p	class:kit::Application	access:public	signature:()
kit::Application::begine_time_	.//Application.h	/^    uint32_t begine_time_;$/;"	m	class:kit::Application	access:private
kit::Application::frame_	.//Application.h	/^    uint32_t frame_;$/;"	m	class:kit::Application	access:protected
kit::Application::frame_delta_	.//Application.h	/^    uint32_t frame_delta_;$/;"	m	class:kit::Application	access:protected
kit::Application::frame_msec_	.//Application.h	/^    uint32_t frame_msec_;$/;"	m	class:kit::Application	access:protected
kit::Application::frame_rate_	.//Application.h	/^    uint32_t frame_rate_;$/;"	m	class:kit::Application	access:protected
kit::Application::getFrame	.//Application.h	/^    uint32_t getFrame() const { return frame_; }$/;"	f	class:kit::Application	access:public	signature:() const
kit::Application::getFrameDelta	.//Application.h	/^    uint32_t getFrameDelta() const { return frame_delta_; }$/;"	f	class:kit::Application	access:public	signature:() const
kit::Application::getFrameRate	.//Application.h	/^    uint32_t getFrameRate() const { return frame_rate_; }$/;"	f	class:kit::Application	access:public	signature:() const
kit::Application::logic	.//Application.h	/^    virtual void logic() = 0;$/;"	p	class:kit::Application	access:public	signature:()
kit::Application::mainLoop	.//Application.cpp	/^void Application::mainLoop()$/;"	f	class:kit::Application	signature:()
kit::Application::mainLoop	.//Application.h	/^    void mainLoop();$/;"	p	class:kit::Application	access:public	signature:()
kit::Application::next_delta_zero_	.//Application.h	/^    bool next_delta_zero_;$/;"	m	class:kit::Application	access:protected
kit::Application::run	.//Application.cpp	/^void Application::run()$/;"	f	class:kit::Application	signature:()
kit::Application::run	.//Application.h	/^    virtual void run();$/;"	p	class:kit::Application	access:public	signature:()
kit::Application::setFrameRate	.//Application.cpp	/^void Application::setFrameRate(unsigned int rate)$/;"	f	class:kit::Application	signature:(unsigned int rate)
kit::Application::setFrameRate	.//Application.h	/^    void setFrameRate(uint32_t rate);$/;"	p	class:kit::Application	access:public	signature:(uint32_t rate)
kit::Application::setNextDeltaZero	.//Application.h	/^    void setNextDeltaZero(bool zero) { next_delta_zero_ = zero; }$/;"	f	class:kit::Application	access:public	signature:(bool zero)
kit::Application::spareLogic	.//Application.h	/^    virtual uint32_t spareLogic(uint32_t spare_time) { return spare_time; };$/;"	f	class:kit::Application	access:public	signature:(uint32_t spare_time)
kit::Application::stop	.//Application.cpp	/^void Application::stop()$/;"	f	class:kit::Application	signature:()
kit::Application::stop	.//Application.h	/^    virtual void stop();$/;"	p	class:kit::Application	access:public	signature:()
kit::Application::valid_	.//Application.h	/^    bool valid_;$/;"	m	class:kit::Application	access:protected
kit::Application::wait_time_	.//Application.h	/^    uint32_t wait_time_;$/;"	m	class:kit::Application	access:private
kit::Application::~Application	.//Application.cpp	/^Application::~Application()$/;"	f	class:kit::Application	signature:()
kit::Application::~Application	.//Application.h	/^    virtual ~Application();$/;"	p	class:kit::Application	access:public	signature:()
kit::Array	.//base/Array.h	/^class Array$/;"	c	namespace:kit
kit::Array::Array	.//base/Array.h	/^    Array() : count_(0), head_(-1), tail_(-1), pos_(-1)$/;"	f	class:kit::Array	access:public	signature:()
kit::Array::Item	.//base/Array.h	/^    struct Item$/;"	s	class:kit::Array	access:private
kit::Array::Item::Item	.//base/Array.h	/^        Item(): next(-2) {}$/;"	f	struct:kit::Array::Item	access:public	signature:()
kit::Array::Item::next	.//base/Array.h	/^        int next;$/;"	m	struct:kit::Array::Item	access:public
kit::Array::Item::prev	.//base/Array.h	/^        int prev;$/;"	m	struct:kit::Array::Item	access:public
kit::Array::Item::value	.//base/Array.h	/^        Type value;$/;"	m	struct:kit::Array::Item	access:public
kit::Array::add	.//base/Array.h	/^    void add(int index, const Type& val)$/;"	f	class:kit::Array	access:public	signature:(int index, const Type& val)
kit::Array::array_	.//base/Array.h	/^    Item array_[Length];$/;"	m	class:kit::Array	access:private
kit::Array::clear	.//base/Array.h	/^    void clear()$/;"	f	class:kit::Array	access:public	signature:()
kit::Array::count	.//base/Array.h	/^    int count() const { return count_; }$/;"	f	class:kit::Array	access:public	signature:() const
kit::Array::count_	.//base/Array.h	/^    int count_;$/;"	m	class:kit::Array	access:private
kit::Array::del	.//base/Array.h	/^    void del(int index)$/;"	f	class:kit::Array	access:public	signature:(int index)
kit::Array::get	.//base/Array.h	/^    bool get(int index, Type& val)$/;"	f	class:kit::Array	access:public	signature:(int index, Type& val)
kit::Array::head_	.//base/Array.h	/^    int head_;$/;"	m	class:kit::Array	access:private
kit::Array::next	.//base/Array.h	/^    bool next(Type& val)$/;"	f	class:kit::Array	access:public	signature:(Type& val)
kit::Array::pos_	.//base/Array.h	/^    int pos_;$/;"	m	class:kit::Array	access:private
kit::Array::resetNext	.//base/Array.h	/^    void resetNext() { pos_ = head_; }$/;"	f	class:kit::Array	access:public	signature:()
kit::Array::tail_	.//base/Array.h	/^    int tail_;$/;"	m	class:kit::Array	access:private
kit::BUFFER_QUEUE_CNT	.//base/BufferPool.h	/^const int32_t BUFFER_QUEUE_CNT = 8;$/;"	m	namespace:kit
kit::Buffer	.//base/Buffer.h	/^class Buffer : public Ref$/;"	c	namespace:kit	inherits:Ref
kit::Buffer::Buffer	.//base/Buffer.cpp	/^Buffer::Buffer()$/;"	f	class:kit::Buffer	signature:()
kit::Buffer::Buffer	.//base/Buffer.h	/^    Buffer();$/;"	p	class:kit::Buffer	access:public	signature:()
kit::Buffer::KIT_CREATE_FUNC	.//base/Buffer.h	/^    KIT_CREATE_FUNC(Buffer);$/;"	p	class:kit::Buffer	access:public	signature:(Buffer)
kit::Buffer::getReadableSize	.//base/Buffer.h	/^    uint32_t getReadableSize() const;$/;"	p	class:kit::Buffer	access:public	signature:() const
kit::Buffer::getReadableSize	.//base/Buffer.h	/^inline uint32_t Buffer::getReadableSize() const$/;"	f	class:kit::Buffer	signature:() const
kit::Buffer::getSize	.//base/Buffer.h	/^    uint32_t getSize() const;$/;"	p	class:kit::Buffer	access:public	signature:() const
kit::Buffer::getSize	.//base/Buffer.h	/^inline uint32_t Buffer::getSize() const$/;"	f	class:kit::Buffer	signature:() const
kit::Buffer::getWritableSize	.//base/Buffer.h	/^    uint32_t getWritableSize() const;$/;"	p	class:kit::Buffer	access:public	signature:() const
kit::Buffer::getWritableSize	.//base/Buffer.h	/^inline uint32_t Buffer::getWritableSize() const$/;"	f	class:kit::Buffer	signature:() const
kit::Buffer::getWrittenSize	.//base/Buffer.h	/^    uint32_t getWrittenSize() const;$/;"	p	class:kit::Buffer	access:public	signature:() const
kit::Buffer::getWrittenSize	.//base/Buffer.h	/^inline uint32_t Buffer::getWrittenSize() const$/;"	f	class:kit::Buffer	signature:() const
kit::Buffer::head_	.//base/Buffer.h	/^    char* head_;$/;"	m	class:kit::Buffer	access:public
kit::Buffer::init	.//base/Buffer.cpp	/^void Buffer::init(uint32_t size)$/;"	f	class:kit::Buffer	signature:(uint32_t size)
kit::Buffer::init	.//base/Buffer.h	/^    void init(uint32_t size);$/;"	p	class:kit::Buffer	access:public	signature:(uint32_t size)
kit::Buffer::operator <<	.//base/Buffer.h	/^	Buffer& operator<<(T v);$/;"	p	class:kit::Buffer	access:public	signature:(T v)
kit::Buffer::operator <<	.//base/Buffer.h	/^inline Buffer& Buffer::operator<< <const char*>(const char* v)$/;"	f	class:kit::Buffer	signature:(const char* v)
kit::Buffer::operator <<	.//base/Buffer.h	/^inline Buffer& Buffer::operator<<(T v)$/;"	f	class:kit::Buffer	signature:(T v)
kit::Buffer::operator >>	.//base/Buffer.h	/^	Buffer& operator>>(T& v);$/;"	p	class:kit::Buffer	access:public	signature:(T& v)
kit::Buffer::operator >>	.//base/Buffer.h	/^inline Buffer& Buffer::operator>> <char*>(char*& v)$/;"	f	class:kit::Buffer	signature:(char*& v)
kit::Buffer::operator >>	.//base/Buffer.h	/^inline Buffer& Buffer::operator>>(T& v)$/;"	f	class:kit::Buffer	signature:(T& v)
kit::Buffer::readBuffer	.//base/Buffer.cpp	/^bool Buffer::readBuffer(void* buf, uint32_t size)$/;"	f	class:kit::Buffer	signature:(void* buf, uint32_t size)
kit::Buffer::readBuffer	.//base/Buffer.h	/^	bool readBuffer(void* buf, uint32_t size);$/;"	p	class:kit::Buffer	access:public	signature:(void* buf, uint32_t size)
kit::Buffer::read_cur_	.//base/Buffer.h	/^    char* read_cur_;$/;"	m	class:kit::Buffer	access:public
kit::Buffer::reset	.//base/Buffer.h	/^    void reset() { write_cur_ = head_; read_cur_ = head_; };$/;"	f	class:kit::Buffer	access:public	signature:()
kit::Buffer::skipRead	.//base/Buffer.h	/^    void skipRead(uint32_t size) { read_cur_ += size; }$/;"	f	class:kit::Buffer	access:public	signature:(uint32_t size)
kit::Buffer::skipWrite	.//base/Buffer.h	/^    void skipWrite(uint32_t size) { write_cur_ += size; }$/;"	f	class:kit::Buffer	access:public	signature:(uint32_t size)
kit::Buffer::tail_	.//base/Buffer.h	/^    char* tail_;$/;"	m	class:kit::Buffer	access:public
kit::Buffer::writeBuffer	.//base/Buffer.cpp	/^bool Buffer::writeBuffer(const void* buf, uint32_t size)$/;"	f	class:kit::Buffer	signature:(const void* buf, uint32_t size)
kit::Buffer::writeBuffer	.//base/Buffer.h	/^    bool writeBuffer(const void* buf, uint32_t size);$/;"	p	class:kit::Buffer	access:public	signature:(const void* buf, uint32_t size)
kit::Buffer::write_cur_	.//base/Buffer.h	/^    char* write_cur_;$/;"	m	class:kit::Buffer	access:public
kit::Buffer::~Buffer	.//base/Buffer.cpp	/^Buffer::~Buffer()$/;"	f	class:kit::Buffer	signature:()
kit::Buffer::~Buffer	.//base/Buffer.h	/^    virtual ~Buffer();$/;"	p	class:kit::Buffer	access:public	signature:()
kit::BufferPool	.//base/BufferPool.h	/^class BufferPool$/;"	c	namespace:kit
kit::BufferPool::BufferPool	.//base/BufferPool.cpp	/^BufferPool::BufferPool()$/;"	f	class:kit::BufferPool	signature:()
kit::BufferPool::BufferPool	.//base/BufferPool.h	/^    BufferPool();$/;"	p	class:kit::BufferPool	access:public	signature:()
kit::BufferPool::BufferQue	.//base/BufferPool.h	/^    typedef Queue<Buffer*, 200> BufferQue;$/;"	t	class:kit::BufferPool	access:private
kit::BufferPool::createBuffer	.//base/BufferPool.cpp	/^Buffer* BufferPool::createBuffer(uint32_t size)$/;"	f	class:kit::BufferPool	signature:(uint32_t size)
kit::BufferPool::createBuffer	.//base/BufferPool.h	/^    Buffer* createBuffer(uint32_t size);$/;"	p	class:kit::BufferPool	access:public	signature:(uint32_t size)
kit::BufferPool::destroyBuffer	.//base/BufferPool.cpp	/^void BufferPool::destroyBuffer(Buffer* buffer)$/;"	f	class:kit::BufferPool	signature:(Buffer* buffer)
kit::BufferPool::destroyBuffer	.//base/BufferPool.h	/^    void destroyBuffer(Buffer* buffer);$/;"	p	class:kit::BufferPool	access:public	signature:(Buffer* buffer)
kit::BufferPool::ques_	.//base/BufferPool.h	/^    BufferQue ques_[BUFFER_QUEUE_CNT];$/;"	m	class:kit::BufferPool	access:private
kit::BufferPool::~BufferPool	.//base/BufferPool.cpp	/^BufferPool::~BufferPool()$/;"	f	class:kit::BufferPool	signature:()
kit::BufferPool::~BufferPool	.//base/BufferPool.h	/^    virtual ~BufferPool();$/;"	p	class:kit::BufferPool	access:public	signature:()
kit::CLIENT_EVENT_CNT	.//network/platform/linux/Client_linux.h	/^const uint16_t CLIENT_EVENT_CNT = 128;$/;"	m	namespace:kit
kit::CONNECTION_LIMIT	.//network/Server.h	/^const uint16_t CONNECTION_LIMIT = 0x7FFF;$/;"	m	namespace:kit
kit::Client	.//network/platform/linux/Client_linux.h	/^class Client : public IClient$/;"	c	namespace:kit	inherits:IClient
kit::Client::Client	.//network/platform/linux/Client_linux.cpp	/^Client::Client()$/;"	f	class:kit::Client	signature:()
kit::Client::Client	.//network/platform/linux/Client_linux.h	/^	Client();$/;"	p	class:kit::Client	access:public	signature:()
kit::Client::EventQue	.//network/platform/linux/Client_linux.h	/^    typedef Queue<PollEvent,CLIENT_EVENT_CNT> EventQue;$/;"	t	class:kit::Client	access:private
kit::Client::addCtrl	.//network/platform/linux/Client_linux.cpp	/^int32_t Client::addCtrl(int32_t fd, int32_t events)$/;"	f	class:kit::Client	signature:(int32_t fd, int32_t events)
kit::Client::addCtrl	.//network/platform/linux/Client_linux.h	/^    int32_t addCtrl(int32_t fd, int32_t events);$/;"	p	class:kit::Client	access:private	signature:(int32_t fd, int32_t events)
kit::Client::delCtrl	.//network/platform/linux/Client_linux.cpp	/^int32_t Client::delCtrl(int32_t fd)$/;"	f	class:kit::Client	signature:(int32_t fd)
kit::Client::delCtrl	.//network/platform/linux/Client_linux.h	/^    int32_t delCtrl(int32_t fd);$/;"	p	class:kit::Client	access:private	signature:(int32_t fd)
kit::Client::event_que_	.//network/platform/linux/Client_linux.h	/^    EventQue event_que_;$/;"	m	class:kit::Client	access:private
kit::Client::handleEvents	.//network/platform/linux/Client_linux.cpp	/^void Client::handleEvents(int32_t events)$/;"	f	class:kit::Client	signature:(int32_t events)
kit::Client::handleEvents	.//network/platform/linux/Client_linux.h	/^    void handleEvents(int32_t events);$/;"	p	class:kit::Client	access:private	signature:(int32_t events)
kit::Client::poll_fd_	.//network/platform/linux/Client_linux.h	/^    int32_t poll_fd_;$/;"	m	class:kit::Client	access:private
kit::Client::run	.//network/platform/linux/Client_linux.cpp	/^void Client::run()$/;"	f	class:kit::Client	signature:()
kit::Client::run	.//network/platform/linux/Client_linux.h	/^    void run();$/;"	p	class:kit::Client	access:public	signature:()
kit::Client::shutdown	.//network/platform/linux/Client_linux.cpp	/^int32_t Client::shutdown()$/;"	f	class:kit::Client	signature:()
kit::Client::shutdown	.//network/platform/linux/Client_linux.h	/^	virtual int32_t shutdown();$/;"	p	class:kit::Client	access:public	signature:()
kit::Client::startup	.//network/platform/linux/Client_linux.cpp	/^int32_t Client::startup(const char* ip, int32_t port)$/;"	f	class:kit::Client	signature:(const char* ip, int32_t port)
kit::Client::startup	.//network/platform/linux/Client_linux.h	/^	virtual int32_t startup(const char* ip, int32_t port);$/;"	p	class:kit::Client	access:public	signature:(const char* ip, int32_t port)
kit::Client::thread_id_	.//network/platform/linux/Client_linux.h	/^    int64_t thread_id_;$/;"	m	class:kit::Client	access:private
kit::Client::update	.//network/platform/linux/Client_linux.cpp	/^void Client::update()$/;"	f	class:kit::Client	signature:()
kit::Client::update	.//network/platform/linux/Client_linux.h	/^    virtual void update();$/;"	p	class:kit::Client	access:public	signature:()
kit::Client::~Client	.//network/platform/linux/Client_linux.cpp	/^Client::~Client()$/;"	f	class:kit::Client	signature:()
kit::Client::~Client	.//network/platform/linux/Client_linux.h	/^    virtual ~Client();$/;"	p	class:kit::Client	access:public	signature:()
kit::HLElement	.//base/HashList.h	/^typedef struct HLElement$/;"	s	namespace:kit
kit::HLElement::__anon1::count	.//base/HashList.h	/^        int count[2]; \/\/0记录长度，1记录数组长度$/;"	m	union:kit::HLElement::__anon1	access:public
kit::HLElement::__anon1::ref	.//base/HashList.h	/^        Ref* ref;$/;"	m	union:kit::HLElement::__anon1	access:public
kit::HLElement::next	.//base/HashList.h	/^    int next;$/;"	m	struct:kit::HLElement	access:public
kit::HLElement::prev	.//base/HashList.h	/^    int prev;$/;"	m	struct:kit::HLElement	access:public
kit::HLElement::u	.//base/HashList.h	/^    }u;$/;"	m	struct:kit::HLElement	typeref:union:kit::HLElement::__anon1	access:public
kit::HashListDef	.//base/HashList.h	/^} HashListElement, HashListDef, *HashListT;$/;"	t	namespace:kit	typeref:struct:kit::HLElement
kit::HashListElement	.//base/HashList.h	/^} HashListElement, HashListDef, *HashListT;$/;"	t	namespace:kit	typeref:struct:kit::HLElement
kit::HashListT	.//base/HashList.h	/^} HashListElement, HashListDef, *HashListT;$/;"	t	namespace:kit	typeref:struct:kit::HLElement
kit::HashList_addElement	.//base/HashList.cpp	/^void HashList_addElement(HashListT hl, int index, Ref* p)$/;"	f	namespace:kit	signature:(HashListT hl, int index, Ref* p)
kit::HashList_addElement	.//base/HashList.h	/^void HashList_addElement(HashListT hl, int index, Ref* p);$/;"	p	namespace:kit	signature:(HashListT hl, int index, Ref* p)
kit::HashList_count	.//base/HashList.h	/^inline int HashList_count(HashListT hl)$/;"	f	namespace:kit	signature:(HashListT hl)
kit::HashList_delElement	.//base/HashList.cpp	/^void HashList_delElement(HashListT hl, int index)$/;"	f	namespace:kit	signature:(HashListT hl, int index)
kit::HashList_delElement	.//base/HashList.h	/^void HashList_delElement(HashListT hl, int index);$/;"	p	namespace:kit	signature:(HashListT hl, int index)
kit::HashList_getElement	.//base/HashList.h	/^inline Ref* HashList_getElement(HashListT hl, int index)$/;"	f	namespace:kit	signature:(HashListT hl, int index)
kit::HashList_init	.//base/HashList.cpp	/^void HashList_init(HashListT hl, int size)$/;"	f	namespace:kit	signature:(HashListT hl, int size)
kit::HashList_init	.//base/HashList.h	/^void HashList_init(HashListT hl, int size);$/;"	p	namespace:kit	signature:(HashListT hl, int size)
kit::HashList_length	.//base/HashList.h	/^inline int HashList_length(HashListT hl)$/;"	f	namespace:kit	signature:(HashListT hl)
kit::HashList_next	.//base/HashList.h	/^inline int HashList_next(HashListT hl, int index)$/;"	f	namespace:kit	signature:(HashListT hl, int index)
kit::HashList_print	.//base/HashList.cpp	/^void HashList_print(HashListT hl)$/;"	f	namespace:kit	signature:(HashListT hl)
kit::HashList_print	.//base/HashList.h	/^void HashList_print(HashListT hl);$/;"	p	namespace:kit	signature:(HashListT hl)
kit::IClient	.//network/Client.h	/^class IClient : public Ref$/;"	c	namespace:kit	inherits:Ref
kit::IClient::IClient	.//network/Client.cpp	/^IClient::IClient()$/;"	f	class:kit::IClient	signature:()
kit::IClient::IClient	.//network/Client.h	/^	IClient();$/;"	p	class:kit::IClient	access:public	signature:()
kit::IClient::active_	.//network/Client.h	/^    bool active_;$/;"	m	class:kit::IClient	access:protected
kit::IClient::getTimeval	.//network/Client.h	/^    inline int32_t getTimeval() const { return timeval_; }$/;"	f	class:kit::IClient	access:public	signature:() const
kit::IClient::setTimeval	.//network/Client.h	/^    inline void setTimeval(int32_t timeval) { timeval_ = timeval; }$/;"	f	class:kit::IClient	access:public	signature:(int32_t timeval)
kit::IClient::shutdown	.//network/Client.cpp	/^int32_t IClient::shutdown()$/;"	f	class:kit::IClient	signature:()
kit::IClient::shutdown	.//network/Client.h	/^	virtual int32_t shutdown();$/;"	p	class:kit::IClient	access:public	signature:()
kit::IClient::socket_	.//network/Client.h	/^	Socket* socket_;$/;"	m	class:kit::IClient	access:protected
kit::IClient::startup	.//network/Client.cpp	/^int32_t IClient::startup(const char* ip, int32_t port)$/;"	f	class:kit::IClient	signature:(const char* ip, int32_t port)
kit::IClient::startup	.//network/Client.h	/^	virtual int32_t startup(const char* ip, int32_t port);$/;"	p	class:kit::IClient	access:public	signature:(const char* ip, int32_t port)
kit::IClient::timeval_	.//network/Client.h	/^    int32_t timeval_;$/;"	m	class:kit::IClient	access:protected
kit::IClient::update	.//network/Client.cpp	/^void IClient::update()$/;"	f	class:kit::IClient	signature:()
kit::IClient::update	.//network/Client.h	/^    virtual void update() = 0;$/;"	p	class:kit::IClient	access:public	signature:()
kit::IClient::~IClient	.//network/Client.cpp	/^IClient::~IClient()$/;"	f	class:kit::IClient	signature:()
kit::IClient::~IClient	.//network/Client.h	/^    virtual ~IClient();$/;"	p	class:kit::IClient	access:public	signature:()
kit::IServer	.//network/Server.h	/^class IServer : public Ref$/;"	c	namespace:kit	inherits:Ref
kit::IServer::EventQue	.//network/Server.h	/^    typedef Queue<PollEvent, SERVER_EVENT_CNT> EventQue;$/;"	t	class:kit::IServer	access:protected
kit::IServer::IServer	.//network/Server.cpp	/^IServer::IServer()$/;"	f	class:kit::IServer	signature:()
kit::IServer::IServer	.//network/Server.h	/^	IServer();$/;"	p	class:kit::IServer	access:public	signature:()
kit::IServer::active_	.//network/Server.h	/^    bool active_;$/;"	m	class:kit::IServer	access:protected
kit::IServer::addSocket	.//network/Server.cpp	/^int32_t IServer::addSocket(int32_t fd, Socket* sock)$/;"	f	class:kit::IServer	signature:(int32_t fd, Socket* sock)
kit::IServer::addSocket	.//network/Server.h	/^    virtual int32_t addSocket(int32_t fd, Socket* sock = NULL);$/;"	p	class:kit::IServer	access:protected	signature:(int32_t fd, Socket* sock = NULL)
kit::IServer::delSocket	.//network/Server.cpp	/^int32_t IServer::delSocket(int32_t fd)$/;"	f	class:kit::IServer	signature:(int32_t fd)
kit::IServer::delSocket	.//network/Server.h	/^    virtual int32_t delSocket(int32_t fd);$/;"	p	class:kit::IServer	access:protected	signature:(int32_t fd)
kit::IServer::event_que_	.//network/Server.h	/^    EventQue event_que_;$/;"	m	class:kit::IServer	access:protected
kit::IServer::getSocket	.//network/Server.cpp	/^Socket* IServer::getSocket(int32_t fd)$/;"	f	class:kit::IServer	signature:(int32_t fd)
kit::IServer::getSocket	.//network/Server.h	/^    Socket* getSocket(int32_t fd);$/;"	p	class:kit::IServer	access:protected	signature:(int32_t fd)
kit::IServer::getTimeval	.//network/Server.h	/^    inline int32_t getTimeval() const { return timeval_; }$/;"	f	class:kit::IServer	access:public	signature:() const
kit::IServer::setTimeval	.//network/Server.h	/^    inline void setTimeval(int32_t timeval) { timeval_ = timeval; }$/;"	f	class:kit::IServer	access:public	signature:(int32_t timeval)
kit::IServer::shutdown	.//network/Server.cpp	/^int32_t IServer::shutdown()$/;"	f	class:kit::IServer	signature:()
kit::IServer::shutdown	.//network/Server.h	/^	virtual int32_t shutdown();$/;"	p	class:kit::IServer	access:public	signature:()
kit::IServer::socket_	.//network/Server.h	/^	Socket* socket_;$/;"	m	class:kit::IServer	access:protected
kit::IServer::socket_array_	.//network/Server.h	/^    Array<Socket*, CONNECTION_LIMIT> socket_array_;$/;"	m	class:kit::IServer	access:protected
kit::IServer::startup	.//network/Server.cpp	/^int32_t IServer::startup(const char* ip, int32_t port)$/;"	f	class:kit::IServer	signature:(const char* ip, int32_t port)
kit::IServer::startup	.//network/Server.h	/^	virtual int32_t startup(const char* ip, int32_t port);$/;"	p	class:kit::IServer	access:public	signature:(const char* ip, int32_t port)
kit::IServer::timeval_	.//network/Server.h	/^    int32_t timeval_;$/;"	m	class:kit::IServer	access:protected
kit::IServer::update	.//network/Server.cpp	/^void IServer::update()$/;"	f	class:kit::IServer	signature:()
kit::IServer::update	.//network/Server.h	/^    virtual void update() = 0;$/;"	p	class:kit::IServer	access:public	signature:()
kit::IServer::~IServer	.//network/Server.cpp	/^IServer::~IServer()$/;"	f	class:kit::IServer	signature:()
kit::IServer::~IServer	.//network/Server.h	/^    virtual ~IServer();$/;"	p	class:kit::IServer	access:public	signature:()
kit::ISockAddr	.//network/SockAddr.h	/^class ISockAddr : public Ref$/;"	c	namespace:kit	inherits:Ref
kit::ISockAddr::ISockAddr	.//network/SockAddr.cpp	/^ISockAddr::ISockAddr()$/;"	f	class:kit::ISockAddr	signature:()
kit::ISockAddr::ISockAddr	.//network/SockAddr.h	/^    ISockAddr();$/;"	p	class:kit::ISockAddr	access:public	signature:()
kit::ISockAddr::addr_	.//network/SockAddr.h	/^    sockaddr* addr_;$/;"	m	class:kit::ISockAddr	access:protected
kit::ISockAddr::init	.//network/SockAddr.cpp	/^void ISockAddr::init(const char* ip, uint16_t port, uint16_t family)$/;"	f	class:kit::ISockAddr	signature:(const char* ip, uint16_t port, uint16_t family)
kit::ISockAddr::init	.//network/SockAddr.h	/^    virtual void init(const char* ip, uint16_t port, uint16_t family);$/;"	p	class:kit::ISockAddr	access:public	signature:(const char* ip, uint16_t port, uint16_t family)
kit::ISockAddr::ip	.//network/SockAddr.h	/^    std::string ip;$/;"	m	class:kit::ISockAddr	access:public
kit::ISockAddr::operator sockaddr*	.//network/SockAddr.h	/^    operator sockaddr*() { return (sockaddr*)addr_; }$/;"	f	class:kit::ISockAddr	access:public	signature:()
kit::ISockAddr::operator sockaddr_in*	.//network/SockAddr.h	/^    operator sockaddr_in*() { return (sockaddr_in*)addr_; }$/;"	f	class:kit::ISockAddr	access:public	signature:()
kit::ISockAddr::port	.//network/SockAddr.h	/^    uint16_t port;$/;"	m	class:kit::ISockAddr	access:public
kit::ISockAddr::valid	.//network/SockAddr.h	/^    bool valid() const { return valid_; }$/;"	f	class:kit::ISockAddr	access:public	signature:() const
kit::ISockAddr::valid_	.//network/SockAddr.h	/^    bool valid_;$/;"	m	class:kit::ISockAddr	access:protected
kit::ISockAddr::~ISockAddr	.//network/SockAddr.cpp	/^ISockAddr::~ISockAddr()$/;"	f	class:kit::ISockAddr	signature:()
kit::ISockAddr::~ISockAddr	.//network/SockAddr.h	/^    virtual ~ISockAddr();$/;"	p	class:kit::ISockAddr	access:public	signature:()
kit::ISocket	.//network/Socket.h	/^class ISocket : public Ref$/;"	c	namespace:kit	inherits:Ref
kit::ISocket::BufferQue	.//network/Socket.h	/^    typedef Queue<Buffer*, 200> BufferQue;$/;"	t	class:kit::ISocket	access:private
kit::ISocket::ISocket	.//network/Socket.cpp	/^ISocket::ISocket()$/;"	f	class:kit::ISocket	signature:()
kit::ISocket::ISocket	.//network/Socket.h	/^	ISocket();$/;"	p	class:kit::ISocket	access:public	signature:()
kit::ISocket::accept	.//network/Socket.cpp	/^int32_t ISocket::accept(SockAddr* addr)$/;"	f	class:kit::ISocket	signature:(SockAddr* addr)
kit::ISocket::accept	.//network/Socket.h	/^	int32_t accept(SockAddr* addr);$/;"	p	class:kit::ISocket	access:public	signature:(SockAddr* addr)
kit::ISocket::addr_	.//network/Socket.h	/^    SockAddr* addr_;$/;"	m	class:kit::ISocket	access:protected
kit::ISocket::bind	.//network/Socket.cpp	/^int32_t ISocket::bind(SockAddr* addr)$/;"	f	class:kit::ISocket	signature:(SockAddr* addr)
kit::ISocket::bind	.//network/Socket.h	/^	int32_t bind(SockAddr* addr);$/;"	p	class:kit::ISocket	access:public	signature:(SockAddr* addr)
kit::ISocket::close	.//network/Socket.cpp	/^void ISocket::close()$/;"	f	class:kit::ISocket	signature:()
kit::ISocket::close	.//network/Socket.h	/^	void close();$/;"	p	class:kit::ISocket	access:public	signature:()
kit::ISocket::connect	.//network/Socket.cpp	/^int32_t ISocket::connect(SockAddr* addr)$/;"	f	class:kit::ISocket	signature:(SockAddr* addr)
kit::ISocket::connect	.//network/Socket.h	/^	int32_t connect(SockAddr* addr);$/;"	p	class:kit::ISocket	access:public	signature:(SockAddr* addr)
kit::ISocket::dealRecv	.//network/Socket.cpp	/^void ISocket::dealRecv()$/;"	f	class:kit::ISocket	signature:()
kit::ISocket::dealRecv	.//network/Socket.h	/^    void dealRecv();$/;"	p	class:kit::ISocket	access:public	signature:()
kit::ISocket::doRecv	.//network/Socket.cpp	/^int32_t ISocket::doRecv()$/;"	f	class:kit::ISocket	signature:()
kit::ISocket::doRecv	.//network/Socket.h	/^    int32_t doRecv();$/;"	p	class:kit::ISocket	access:public	signature:()
kit::ISocket::doSend	.//network/Socket.cpp	/^int32_t ISocket::doSend()$/;"	f	class:kit::ISocket	signature:()
kit::ISocket::doSend	.//network/Socket.h	/^    int32_t doSend();$/;"	p	class:kit::ISocket	access:public	signature:()
kit::ISocket::getAddr	.//network/Socket.h	/^    SockAddr* getAddr() const { return addr_; }$/;"	f	class:kit::ISocket	access:public	signature:() const
kit::ISocket::getErrno	.//network/Socket.cpp	/^int32_t ISocket::getErrno()$/;"	f	class:kit::ISocket	signature:()
kit::ISocket::getErrno	.//network/Socket.h	/^	int32_t getErrno();$/;"	p	class:kit::ISocket	access:public	signature:()
kit::ISocket::getHandle	.//network/Socket.h	/^	inline int32_t getHandle() const { return sock_; }$/;"	f	class:kit::ISocket	access:public	signature:() const
kit::ISocket::getOption	.//network/Socket.cpp	/^int32_t ISocket::getOption(int32_t level, int32_t optname, char* optval, int32_t* optlen)$/;"	f	class:kit::ISocket	signature:(int32_t level, int32_t optname, char* optval, int32_t* optlen)
kit::ISocket::getOption	.//network/Socket.h	/^	int32_t getOption(int32_t level, int32_t optname, char* optval, int32_t* optlen);$/;"	p	class:kit::ISocket	access:public	signature:(int32_t level, int32_t optname, char* optval, int32_t* optlen)
kit::ISocket::init	.//network/Socket.cpp	/^void ISocket::init(int32_t family, int32_t type, int32_t protocol)$/;"	f	class:kit::ISocket	signature:(int32_t family, int32_t type, int32_t protocol)
kit::ISocket::init	.//network/Socket.cpp	/^void ISocket::init(int32_t sock)$/;"	f	class:kit::ISocket	signature:(int32_t sock)
kit::ISocket::init	.//network/Socket.cpp	/^void ISocket::init(void)$/;"	f	class:kit::ISocket	signature:(void)
kit::ISocket::init	.//network/Socket.h	/^	virtual void init(int32_t family, int32_t type, int32_t protocol);$/;"	p	class:kit::ISocket	access:public	signature:(int32_t family, int32_t type, int32_t protocol)
kit::ISocket::init	.//network/Socket.h	/^    virtual void init(int32_t sock);$/;"	p	class:kit::ISocket	access:public	signature:(int32_t sock)
kit::ISocket::init	.//network/Socket.h	/^    virtual void init(void);$/;"	p	class:kit::ISocket	access:public	signature:(void)
kit::ISocket::ioctl	.//network/Socket.cpp	/^int32_t ISocket::ioctl(unsigned long cmd, char* argp)$/;"	f	class:kit::ISocket	signature:(unsigned long cmd, char* argp)
kit::ISocket::ioctl	.//network/Socket.h	/^	int32_t ioctl(unsigned long cmd, char* argp);$/;"	p	class:kit::ISocket	access:public	signature:(unsigned long cmd, char* argp)
kit::ISocket::listen	.//network/Socket.cpp	/^int32_t ISocket::listen(int32_t count)$/;"	f	class:kit::ISocket	signature:(int32_t count)
kit::ISocket::listen	.//network/Socket.h	/^	int32_t listen(int32_t count);$/;"	p	class:kit::ISocket	access:public	signature:(int32_t count)
kit::ISocket::open	.//network/Socket.cpp	/^void ISocket::open()$/;"	f	class:kit::ISocket	signature:()
kit::ISocket::open	.//network/Socket.h	/^	void open();$/;"	p	class:kit::ISocket	access:public	signature:()
kit::ISocket::packet_seed_	.//network/Socket.h	/^    uint32_t packet_seed_;$/;"	m	class:kit::ISocket	access:private
kit::ISocket::readyOut_	.//network/Socket.h	/^    bool readyOut_;$/;"	m	class:kit::ISocket	access:public
kit::ISocket::recv	.//network/Socket.cpp	/^int32_t ISocket::recv(char* buf, int32_t size, int32_t mode)$/;"	f	class:kit::ISocket	signature:(char* buf, int32_t size, int32_t mode)
kit::ISocket::recv	.//network/Socket.h	/^	int32_t recv(char* buf, int32_t size, int32_t mode = 0);$/;"	p	class:kit::ISocket	access:public	signature:(char* buf, int32_t size, int32_t mode = 0)
kit::ISocket::recvBuffer	.//network/Socket.cpp	/^int32_t ISocket::recvBuffer(Buffer* buf)$/;"	f	class:kit::ISocket	signature:(Buffer* buf)
kit::ISocket::recvBuffer	.//network/Socket.h	/^    int32_t recvBuffer(Buffer* buf);$/;"	p	class:kit::ISocket	access:protected	signature:(Buffer* buf)
kit::ISocket::recvClear	.//network/Socket.cpp	/^void ISocket::recvClear()$/;"	f	class:kit::ISocket	signature:()
kit::ISocket::recvClear	.//network/Socket.h	/^    void recvClear();$/;"	p	class:kit::ISocket	access:protected	signature:()
kit::ISocket::recvFrom	.//network/Socket.cpp	/^int32_t ISocket::recvFrom(char* buf, int32_t size, int32_t mode, SockAddr *addr)$/;"	f	class:kit::ISocket	signature:(char* buf, int32_t size, int32_t mode, SockAddr *addr)
kit::ISocket::recvFrom	.//network/Socket.h	/^	int32_t recvFrom(char* buf, int32_t size, int32_t mode, SockAddr* addr);$/;"	p	class:kit::ISocket	access:public	signature:(char* buf, int32_t size, int32_t mode, SockAddr* addr)
kit::ISocket::recv_buf_	.//network/Socket.h	/^    Buffer* recv_buf_;$/;"	m	class:kit::ISocket	access:private
kit::ISocket::recv_count_	.//network/Socket.h	/^    uint32_t recv_count_;$/;"	m	class:kit::ISocket	access:private
kit::ISocket::recv_head_buf_	.//network/Socket.h	/^    Buffer* recv_head_buf_;$/;"	m	class:kit::ISocket	access:private
kit::ISocket::recv_list_	.//network/Socket.h	/^    List<Buffer*> recv_list_;$/;"	m	class:kit::ISocket	access:private
kit::ISocket::recv_que_	.//network/Socket.h	/^    BufferQue recv_que_;$/;"	m	class:kit::ISocket	access:private
kit::ISocket::send	.//network/Socket.cpp	/^int32_t ISocket::send(const char* buf, int32_t size, int32_t mode)$/;"	f	class:kit::ISocket	signature:(const char* buf, int32_t size, int32_t mode)
kit::ISocket::send	.//network/Socket.h	/^	int32_t send(const char* buf, int32_t size, int32_t mode = 0);$/;"	p	class:kit::ISocket	access:public	signature:(const char* buf, int32_t size, int32_t mode = 0)
kit::ISocket::sendBuffer	.//network/Socket.cpp	/^int32_t ISocket::sendBuffer(Buffer* buf)$/;"	f	class:kit::ISocket	signature:(Buffer* buf)
kit::ISocket::sendBuffer	.//network/Socket.h	/^    int32_t sendBuffer(Buffer* buf);$/;"	p	class:kit::ISocket	access:protected	signature:(Buffer* buf)
kit::ISocket::sendPacket	.//network/Socket.cpp	/^int32_t ISocket::sendPacket(Buffer* buf)$/;"	f	class:kit::ISocket	signature:(Buffer* buf)
kit::ISocket::sendPacket	.//network/Socket.h	/^    int32_t sendPacket(Buffer* buf);$/;"	p	class:kit::ISocket	access:public	signature:(Buffer* buf)
kit::ISocket::sendTo	.//network/Socket.cpp	/^int32_t ISocket::sendTo(const char* buf, int32_t size, int32_t mode, SockAddr* addr)$/;"	f	class:kit::ISocket	signature:(const char* buf, int32_t size, int32_t mode, SockAddr* addr)
kit::ISocket::sendTo	.//network/Socket.h	/^	int32_t sendTo(const char* buf, int32_t size, int32_t mode, SockAddr* addr);$/;"	p	class:kit::ISocket	access:public	signature:(const char* buf, int32_t size, int32_t mode, SockAddr* addr)
kit::ISocket::send_buf_	.//network/Socket.h	/^    Buffer* send_buf_;$/;"	m	class:kit::ISocket	access:private
kit::ISocket::send_bufs_	.//network/Socket.h	/^    Buffer* send_bufs_;$/;"	m	class:kit::ISocket	access:private
kit::ISocket::send_head_buf_	.//network/Socket.h	/^    Buffer* send_head_buf_;$/;"	m	class:kit::ISocket	access:private
kit::ISocket::send_list_	.//network/Socket.h	/^    List<Buffer*> send_list_;$/;"	m	class:kit::ISocket	access:private
kit::ISocket::send_que_	.//network/Socket.h	/^    BufferQue send_que_;$/;"	m	class:kit::ISocket	access:private
kit::ISocket::setAddr	.//network/Socket.cpp	/^void ISocket::setAddr(SockAddr* addr)$/;"	f	class:kit::ISocket	signature:(SockAddr* addr)
kit::ISocket::setAddr	.//network/Socket.h	/^    void setAddr(SockAddr* addr);$/;"	p	class:kit::ISocket	access:public	signature:(SockAddr* addr)
kit::ISocket::setHandle	.//network/Socket.cpp	/^void ISocket::setHandle(int32_t sock)$/;"	f	class:kit::ISocket	signature:(int32_t sock)
kit::ISocket::setHandle	.//network/Socket.h	/^	void setHandle(int32_t _sock);$/;"	p	class:kit::ISocket	access:public	signature:(int32_t _sock)
kit::ISocket::setOption	.//network/Socket.cpp	/^int32_t ISocket::setOption(int32_t level, int32_t optname, const char* optval, int32_t optlen)$/;"	f	class:kit::ISocket	signature:(int32_t level, int32_t optname, const char* optval, int32_t optlen)
kit::ISocket::setOption	.//network/Socket.h	/^	int32_t setOption(int32_t level, int32_t optname, const char* optval, int32_t optlen);$/;"	p	class:kit::ISocket	access:public	signature:(int32_t level, int32_t optname, const char* optval, int32_t optlen)
kit::ISocket::shutdown	.//network/Socket.cpp	/^int32_t ISocket::shutdown(int32_t mode)$/;"	f	class:kit::ISocket	signature:(int32_t mode)
kit::ISocket::shutdown	.//network/Socket.h	/^	int32_t shutdown(int32_t mode);$/;"	p	class:kit::ISocket	access:public	signature:(int32_t mode)
kit::ISocket::sock_	.//network/Socket.h	/^	int32_t sock_;$/;"	m	class:kit::ISocket	access:protected
kit::ISocket::valid	.//network/Socket.h	/^    bool valid() const { return valid_; }$/;"	f	class:kit::ISocket	access:public	signature:() const
kit::ISocket::valid_	.//network/Socket.h	/^    bool valid_;$/;"	m	class:kit::ISocket	access:public
kit::ISocket::~ISocket	.//network/Socket.cpp	/^ISocket::~ISocket()$/;"	f	class:kit::ISocket	signature:()
kit::ISocket::~ISocket	.//network/Socket.h	/^	virtual ~ISocket();$/;"	p	class:kit::ISocket	access:public	signature:()
kit::LOG_TYPE_DBG	.//base/Logger.h	/^    LOG_TYPE_DBG,   \/\/调试日志$/;"	e	enum:kit::__anon2
kit::LOG_TYPE_ERR	.//base/Logger.h	/^    LOG_TYPE_ERR,   \/\/错误日志$/;"	e	enum:kit::__anon2
kit::LOG_TYPE_LOG	.//base/Logger.h	/^    LOG_TYPE_LOG,   \/\/普通日志$/;"	e	enum:kit::__anon2
kit::LOG_TYPE_SQL	.//base/Logger.h	/^    LOG_TYPE_SQL,   \/\/数据库日志$/;"	e	enum:kit::__anon2
kit::List	.//base/List.h	/^class List$/;"	c	namespace:kit
kit::List::Item	.//base/List.h	/^    struct Item $/;"	s	class:kit::List	access:private
kit::List::Item::next	.//base/List.h	/^        Item* next;$/;"	m	struct:kit::List::Item	access:public
kit::List::Item::prev	.//base/List.h	/^        Item* prev;$/;"	m	struct:kit::List::Item	access:public
kit::List::Item::value	.//base/List.h	/^        Type value;$/;"	m	struct:kit::List::Item	access:public
kit::List::List	.//base/List.h	/^    List(): head_(0), tail_(0), count_(0)$/;"	f	class:kit::List	access:public	signature:()
kit::List::count	.//base/List.h	/^    int count() { return count_; }$/;"	f	class:kit::List	access:public	signature:()
kit::List::count_	.//base/List.h	/^    int count_;$/;"	m	class:kit::List	access:private
kit::List::erase	.//base/List.h	/^    bool erase(int index)$/;"	f	class:kit::List	access:public	signature:(int index)
kit::List::front	.//base/List.h	/^    bool front(Type& value)$/;"	f	class:kit::List	access:public	signature:(Type& value)
kit::List::head_	.//base/List.h	/^    Item* head_;$/;"	m	class:kit::List	access:private
kit::List::insert	.//base/List.h	/^    bool insert(int index, const Type& item)$/;"	f	class:kit::List	access:public	signature:(int index, const Type& item)
kit::List::pop	.//base/List.h	/^    bool pop(Type& value)$/;"	f	class:kit::List	access:public	signature:(Type& value)
kit::List::push	.//base/List.h	/^    bool push(const Type& item)$/;"	f	class:kit::List	access:public	signature:(const Type& item)
kit::List::tail_	.//base/List.h	/^    Item* tail_;$/;"	m	class:kit::List	access:private
kit::Logger	.//base/Logger.h	/^class Logger$/;"	c	namespace:kit
kit::Logger::Logger	.//base/Logger.cpp	/^Logger::Logger()$/;"	f	class:kit::Logger	signature:()
kit::Logger::Logger	.//base/Logger.h	/^    Logger();$/;"	p	class:kit::Logger	access:public	signature:()
kit::Logger::LoggerAPI	.//base/Logger.h	/^    typedef void (Logger::* LoggerAPI)(const char* format, ...);$/;"	t	class:kit::Logger	access:public
kit::Logger::api_table_	.//base/Logger.h	/^    LoggerAPI api_table_[MAX_LOG_TYPE];$/;"	m	class:kit::Logger	access:private
kit::Logger::getAPI	.//base/Logger.cpp	/^Logger::LoggerAPI Logger::getAPI(int t)$/;"	f	class:kit::Logger	signature:(int t)
kit::Logger::getAPI	.//base/Logger.h	/^    LoggerAPI getAPI(int t);$/;"	p	class:kit::Logger	access:public	signature:(int t)
kit::Logger::setAPI	.//base/Logger.cpp	/^void Logger::setAPI(int t, Logger::LoggerAPI api)$/;"	f	class:kit::Logger	signature:(int t, Logger::LoggerAPI api)
kit::Logger::setAPI	.//base/Logger.h	/^    void setAPI(int t, LoggerAPI api);$/;"	p	class:kit::Logger	access:public	signature:(int t, LoggerAPI api)
kit::Logger::writeLog	.//base/Logger.h	/^    void writeLog(const char* format, ...)$/;"	f	class:kit::Logger	access:public	signature:(const char* format, ...)
kit::Logger::writeNone	.//base/Logger.h	/^    void writeNone(const char* format, ...) {};$/;"	f	class:kit::Logger	access:public	signature:(const char* format, ...)
kit::Logger::~Logger	.//base/Logger.cpp	/^Logger::~Logger()$/;"	f	class:kit::Logger	signature:()
kit::Logger::~Logger	.//base/Logger.h	/^    ~Logger();$/;"	p	class:kit::Logger	access:public	signature:()
kit::MAX_LISTEN	.//network/Client.cpp	/^const int32_t MAX_LISTEN = 50;$/;"	m	namespace:kit	file:
kit::MAX_LISTEN	.//network/Server.cpp	/^const int32_t MAX_LISTEN = 50;$/;"	m	namespace:kit	file:
kit::MAX_LISTEN	.//network/platform/linux/Client_linux.cpp	/^const int32_t MAX_LISTEN = 50;$/;"	m	namespace:kit	file:
kit::MAX_LISTEN	.//network/platform/linux/Server_linux.cpp	/^const int32_t MAX_LISTEN = 50;$/;"	m	namespace:kit	file:
kit::MAX_LISTEN	.//network/platform/win/Server.cpp	/^const int32_t MAX_LISTEN = 50;$/;"	m	namespace:kit	file:
kit::MAX_LOG_BUFFER_LEN	.//base/Logger.h	/^const int MAX_LOG_BUFFER_LEN = 1024 * 16;$/;"	m	namespace:kit
kit::MAX_LOG_TYPE	.//base/Logger.h	/^    MAX_LOG_TYPE,$/;"	e	enum:kit::__anon2
kit::PACKET_HEADER_SIZE	.//network/Packet.h	/^const uint32_t PACKET_HEADER_SIZE = sizeof(PacketHeader);$/;"	m	namespace:kit
kit::PACKET_MAX_SIZE	.//network/Packet.h	/^const uint32_t PACKET_MAX_SIZE = 0xFFFF;$/;"	m	namespace:kit
kit::PACKET_SIZE	.//network/netsys.h	/^const uint32_t PACKET_SIZE 512;$/;"	m	namespace:kit
kit::PacketHeader	.//network/Packet.h	/^struct PacketHeader$/;"	s	namespace:kit
kit::PacketHeader::length	.//network/Packet.h	/^    uint16_t length;$/;"	m	struct:kit::PacketHeader	access:public
kit::PacketHeader::seed	.//network/Packet.h	/^    uint16_t seed;$/;"	m	struct:kit::PacketHeader	access:public
kit::PollEvent	.//network/netsys.h	/^struct PollEvent {$/;"	s	namespace:kit
kit::PollEvent::events	.//network/netsys.h	/^    int32_t events;$/;"	m	struct:kit::PollEvent	access:public
kit::PollEvent::fd	.//network/netsys.h	/^    int32_t fd;$/;"	m	struct:kit::PollEvent	access:public
kit::Queue	.//base/Queue.h	/^class Queue$/;"	c	namespace:kit
kit::Queue::Queue	.//base/Queue.h	/^    Queue(): count_(0), head_(0), tail_(0)$/;"	f	class:kit::Queue	access:public	signature:()
kit::Queue::count	.//base/Queue.h	/^    int count()$/;"	f	class:kit::Queue	access:public	signature:()
kit::Queue::count_	.//base/Queue.h	/^    int count_;$/;"	m	class:kit::Queue	access:private
kit::Queue::front	.//base/Queue.h	/^    bool front(Type& value)$/;"	f	class:kit::Queue	access:public	signature:(Type& value)
kit::Queue::head_	.//base/Queue.h	/^    int head_;$/;"	m	class:kit::Queue	access:private
kit::Queue::pop	.//base/Queue.h	/^    bool pop(Type& value)$/;"	f	class:kit::Queue	access:public	signature:(Type& value)
kit::Queue::push	.//base/Queue.h	/^    bool push(const Type& value)$/;"	f	class:kit::Queue	access:public	signature:(const Type& value)
kit::Queue::que_	.//base/Queue.h	/^    Type que_[Length];$/;"	m	class:kit::Queue	access:private
kit::Queue::rest	.//base/Queue.h	/^    int rest()$/;"	f	class:kit::Queue	access:public	signature:()
kit::Queue::tail_	.//base/Queue.h	/^    int tail_;$/;"	m	class:kit::Queue	access:private
kit::Ref	.//base/Ref.h	/^class Ref$/;"	c	namespace:kit
kit::Ref::Ref	.//base/Ref.cpp	/^Ref::Ref()$/;"	f	class:kit::Ref	signature:()
kit::Ref::Ref	.//base/Ref.h	/^    Ref();$/;"	p	class:kit::Ref	access:protected	signature:()
kit::Ref::autoRelease	.//base/Ref.cpp	/^Ref* Ref::autoRelease()$/;"	f	class:kit::Ref	signature:()
kit::Ref::autoRelease	.//base/Ref.h	/^    Ref* autoRelease();$/;"	p	class:kit::Ref	access:public	signature:()
kit::Ref::getReferenceCount	.//base/Ref.h	/^    unsigned int getReferenceCount() const { return reference_count_; };$/;"	f	class:kit::Ref	access:public	signature:() const
kit::Ref::reference_count_	.//base/Ref.h	/^    unsigned int reference_count_;$/;"	m	class:kit::Ref	access:protected
kit::Ref::release	.//base/Ref.cpp	/^void Ref::release()$/;"	f	class:kit::Ref	signature:()
kit::Ref::release	.//base/Ref.h	/^    void release();$/;"	p	class:kit::Ref	access:public	signature:()
kit::Ref::retain	.//base/Ref.cpp	/^void Ref::retain()$/;"	f	class:kit::Ref	signature:()
kit::Ref::retain	.//base/Ref.h	/^    void retain();$/;"	p	class:kit::Ref	access:public	signature:()
kit::Ref::~Ref	.//base/Ref.cpp	/^Ref::~Ref()$/;"	f	class:kit::Ref	signature:()
kit::Ref::~Ref	.//base/Ref.h	/^    virtual ~Ref();$/;"	p	class:kit::Ref	access:public	signature:()
kit::RefPool	.//base/RefPool.h	/^class RefPool$/;"	c	namespace:kit
kit::RefPool::RefPool	.//base/RefPool.cpp	/^RefPool::RefPool()$/;"	f	class:kit::RefPool	signature:()
kit::RefPool::RefPool	.//base/RefPool.h	/^    RefPool();$/;"	p	class:kit::RefPool	access:public	signature:()
kit::RefPool::RefVec	.//base/RefPool.h	/^    typedef std::vector<Ref*> RefVec;$/;"	t	class:kit::RefPool	access:private
kit::RefPool::addRef	.//base/RefPool.cpp	/^void RefPool::addRef(Ref* ref)$/;"	f	class:kit::RefPool	signature:(Ref* ref)
kit::RefPool::addRef	.//base/RefPool.h	/^    void addRef(Ref* ref);$/;"	p	class:kit::RefPool	access:public	signature:(Ref* ref)
kit::RefPool::clear	.//base/RefPool.cpp	/^void RefPool::clear()$/;"	f	class:kit::RefPool	signature:()
kit::RefPool::clear	.//base/RefPool.h	/^    void clear();$/;"	p	class:kit::RefPool	access:public	signature:()
kit::RefPool::delRef	.//base/RefPool.cpp	/^void RefPool::delRef(Ref* ref)$/;"	f	class:kit::RefPool	signature:(Ref* ref)
kit::RefPool::delRef	.//base/RefPool.h	/^    void delRef(Ref* ref);$/;"	p	class:kit::RefPool	access:public	signature:(Ref* ref)
kit::RefPool::ref_vec_	.//base/RefPool.h	/^    RefVec ref_vec_;$/;"	m	class:kit::RefPool	access:private
kit::RefPool::~RefPool	.//base/RefPool.cpp	/^RefPool::~RefPool()$/;"	f	class:kit::RefPool	signature:()
kit::RefPool::~RefPool	.//base/RefPool.h	/^    virtual ~RefPool();$/;"	p	class:kit::RefPool	access:public	signature:()
kit::RefPoolManager	.//base/RefPool.h	/^class RefPoolManager$/;"	c	namespace:kit
kit::RefPoolManager::PoolVec	.//base/RefPool.h	/^    typedef std::vector<RefPool*> PoolVec;$/;"	t	class:kit::RefPoolManager	access:private
kit::RefPoolManager::RefPoolManager	.//base/RefPool.cpp	/^RefPoolManager::RefPoolManager()$/;"	f	class:kit::RefPoolManager	signature:()
kit::RefPoolManager::RefPoolManager	.//base/RefPool.h	/^    RefPoolManager();$/;"	p	class:kit::RefPoolManager	access:public	signature:()
kit::RefPoolManager::cur_pool_	.//base/RefPool.h	/^    RefPool* cur_pool_;$/;"	m	class:kit::RefPoolManager	access:private
kit::RefPoolManager::getCurrentPool	.//base/RefPool.h	/^    RefPool* getCurrentPool() const { return cur_pool_; }$/;"	f	class:kit::RefPoolManager	access:public	signature:() const
kit::RefPoolManager::pool_vec_	.//base/RefPool.h	/^    PoolVec pool_vec_;$/;"	m	class:kit::RefPoolManager	access:private
kit::RefPoolManager::pop	.//base/RefPool.cpp	/^void RefPoolManager::pop()$/;"	f	class:kit::RefPoolManager	signature:()
kit::RefPoolManager::pop	.//base/RefPool.h	/^    void pop();$/;"	p	class:kit::RefPoolManager	access:public	signature:()
kit::RefPoolManager::push	.//base/RefPool.cpp	/^void RefPoolManager::push(RefPool* pool)$/;"	f	class:kit::RefPoolManager	signature:(RefPool* pool)
kit::RefPoolManager::push	.//base/RefPool.h	/^    void push(RefPool* pool);$/;"	p	class:kit::RefPoolManager	access:public	signature:(RefPool* pool)
kit::RefPoolManager::~RefPoolManager	.//base/RefPool.cpp	/^RefPoolManager::~RefPoolManager()$/;"	f	class:kit::RefPoolManager	signature:()
kit::RefPoolManager::~RefPoolManager	.//base/RefPool.h	/^    virtual ~RefPoolManager();$/;"	p	class:kit::RefPoolManager	access:public	signature:()
kit::SERVER_EVENT_CNT	.//network/Server.h	/^const uint16_t SERVER_EVENT_CNT = 512;$/;"	m	namespace:kit
kit::Server	.//network/platform/linux/Server_linux.h	/^class Server : public IServer$/;"	c	namespace:kit	inherits:IServer
kit::Server::Server	.//network/platform/linux/Server_linux.cpp	/^Server::Server()$/;"	f	class:kit::Server	signature:()
kit::Server::Server	.//network/platform/linux/Server_linux.h	/^	Server();$/;"	p	class:kit::Server	access:public	signature:()
kit::Server::Server	.//network/platform/win/Server.cpp	/^Server::Server()$/;"	f	class:kit::Server	signature:()
kit::Server::addCtrl	.//network/platform/linux/Server_linux.cpp	/^int32_t Server::addCtrl(int32_t fd, int32_t events)$/;"	f	class:kit::Server	signature:(int32_t fd, int32_t events)
kit::Server::addCtrl	.//network/platform/linux/Server_linux.h	/^    int32_t addCtrl(int32_t fd, int32_t events);$/;"	p	class:kit::Server	access:private	signature:(int32_t fd, int32_t events)
kit::Server::delCtrl	.//network/platform/linux/Server_linux.cpp	/^int32_t Server::delCtrl(int32_t fd)$/;"	f	class:kit::Server	signature:(int32_t fd)
kit::Server::delCtrl	.//network/platform/linux/Server_linux.h	/^    int32_t delCtrl(int32_t fd);$/;"	p	class:kit::Server	access:private	signature:(int32_t fd)
kit::Server::handleSocket	.//network/platform/linux/Server_linux.cpp	/^int32_t Server::handleSocket(Socket* sock, int32_t events)$/;"	f	class:kit::Server	signature:(Socket* sock, int32_t events)
kit::Server::handleSocket	.//network/platform/linux/Server_linux.h	/^    int32_t handleSocket(Socket* sock, int32_t events);$/;"	p	class:kit::Server	access:private	signature:(Socket* sock, int32_t events)
kit::Server::poll_fd_	.//network/platform/linux/Server_linux.h	/^    int32_t poll_fd_;$/;"	m	class:kit::Server	access:private
kit::Server::run	.//network/platform/linux/Server_linux.cpp	/^void Server::run()$/;"	f	class:kit::Server	signature:()
kit::Server::run	.//network/platform/linux/Server_linux.h	/^    void run();$/;"	p	class:kit::Server	access:public	signature:()
kit::Server::shutdown	.//network/platform/linux/Server_linux.cpp	/^int32_t Server::shutdown()$/;"	f	class:kit::Server	signature:()
kit::Server::shutdown	.//network/platform/linux/Server_linux.h	/^	virtual int32_t shutdown();$/;"	p	class:kit::Server	access:public	signature:()
kit::Server::shutdown	.//network/platform/win/Server.cpp	/^void Server::shutdown()$/;"	f	class:kit::Server	signature:()
kit::Server::startup	.//network/platform/linux/Server_linux.cpp	/^int32_t Server::startup(const char* ip, int32_t port)$/;"	f	class:kit::Server	signature:(const char* ip, int32_t port)
kit::Server::startup	.//network/platform/linux/Server_linux.h	/^	virtual int32_t startup(const char* ip, int32_t port);$/;"	p	class:kit::Server	access:public	signature:(const char* ip, int32_t port)
kit::Server::startup	.//network/platform/win/Server.cpp	/^void Server::startup(const char* ip, int32_t port)$/;"	f	class:kit::Server	signature:(const char* ip, int32_t port)
kit::Server::thread_id_	.//network/platform/linux/Server_linux.h	/^    int64_t thread_id_;$/;"	m	class:kit::Server	access:private
kit::Server::update	.//network/platform/linux/Server_linux.cpp	/^void Server::update()$/;"	f	class:kit::Server	signature:()
kit::Server::update	.//network/platform/linux/Server_linux.h	/^    virtual void update();$/;"	p	class:kit::Server	access:public	signature:()
kit::Server::~Server	.//network/platform/linux/Server_linux.cpp	/^Server::~Server()$/;"	f	class:kit::Server	signature:()
kit::Server::~Server	.//network/platform/linux/Server_linux.h	/^    virtual ~Server();$/;"	p	class:kit::Server	access:public	signature:()
kit::Server::~Server	.//network/platform/win/Server.cpp	/^Server::~Server()$/;"	f	class:kit::Server	signature:()
kit::Singleton	.//base/Singleton.h	/^class Singleton$/;"	c	namespace:kit
kit::Singleton::exists	.//base/Singleton.h	/^    static bool exists(void)$/;"	f	class:kit::Singleton	access:public	signature:(void)
kit::Singleton::instance	.//base/Singleton.h	/^    inline static T* instance(void)$/;"	f	class:kit::Singleton	access:public	signature:(void)
kit::Singleton::instance_	.//base/Singleton.h	/^    static T* instance_;$/;"	m	class:kit::Singleton	access:protected
kit::Singleton::instance_	.//base/Singleton.h	/^template<typename T> T* Singleton<T>::instance_ = 0;$/;"	m	class:kit::Singleton
kit::Singleton::release	.//base/Singleton.h	/^    static void release(void)$/;"	f	class:kit::Singleton	access:public	signature:(void)
kit::SockAddr	.//network/platform/linux/SockAddr_linux.h	/^class SockAddr : public ISockAddr$/;"	c	namespace:kit	inherits:ISockAddr
kit::SockAddr::SockAddr	.//network/platform/win/SockAddr.cpp	/^SockAddr::SockAddr()$/;"	f	class:kit::SockAddr	signature:()
kit::SockAddr::init	.//network/platform/linux/SockAddr_linux.cpp	/^void SockAddr::init(const char* ip, uint16_t port, uint16_t family)$/;"	f	class:kit::SockAddr	signature:(const char* ip, uint16_t port, uint16_t family)
kit::SockAddr::init	.//network/platform/linux/SockAddr_linux.h	/^    virtual void init(const char* ip, uint16_t port, uint16_t family);$/;"	p	class:kit::SockAddr	access:public	signature:(const char* ip, uint16_t port, uint16_t family)
kit::SockAddr::init	.//network/platform/win/SockAddr.cpp	/^void SockAddr::init(const char* ip, uint16_t port, uint16_t family)$/;"	f	class:kit::SockAddr	signature:(const char* ip, uint16_t port, uint16_t family)
kit::SockAddr::~SockAddr	.//network/platform/linux/SockAddr_linux.cpp	/^SockAddr::~SockAddr()$/;"	f	class:kit::SockAddr	signature:()
kit::SockAddr::~SockAddr	.//network/platform/linux/SockAddr_linux.h	/^    virtual ~SockAddr();$/;"	p	class:kit::SockAddr	access:public	signature:()
kit::SockAddr::~SockAddr	.//network/platform/win/SockAddr.cpp	/^SockAddr::~SockAddr()$/;"	f	class:kit::SockAddr	signature:()
kit::Socket	.//network/platform/linux/Socket_linux.h	/^class Socket : public ISocket$/;"	c	namespace:kit	inherits:ISocket
kit::Socket::Socket	.//network/platform/win/Socket.cpp	/^Socket::Socket()$/;"	f	class:kit::Socket	signature:()
kit::Socket::accept	.//network/platform/win/Socket.cpp	/^int32_t Socket::accept(sockaddr* addr)$/;"	f	class:kit::Socket	signature:(sockaddr* addr)
kit::Socket::bind	.//network/platform/win/Socket.cpp	/^int32_t Socket::bind(const sockaddr* addr)$/;"	f	class:kit::Socket	signature:(const sockaddr* addr)
kit::Socket::close	.//network/platform/win/Socket.cpp	/^void Socket::close()$/;"	f	class:kit::Socket	signature:()
kit::Socket::connect	.//network/platform/win/Socket.cpp	/^int32_t Socket::connect(const sockaddr* addr)$/;"	f	class:kit::Socket	signature:(const sockaddr* addr)
kit::Socket::getErrno	.//network/platform/win/Socket.cpp	/^int32_t Socket::getErrno()$/;"	f	class:kit::Socket	signature:()
kit::Socket::getOption	.//network/platform/win/Socket.cpp	/^int32_t Socket::getOption(int32_t level, int32_t optname, char* optval, int32_t* optlen)$/;"	f	class:kit::Socket	signature:(int32_t level, int32_t optname, char* optval, int32_t* optlen)
kit::Socket::init	.//network/platform/win/Socket.cpp	/^void Socket::init(int32_t family, int32_t type, int32_t protocol)$/;"	f	class:kit::Socket	signature:(int32_t family, int32_t type, int32_t protocol)
kit::Socket::ioctl	.//network/platform/win/Socket.cpp	/^int32_t Socket::ioctl(unsigned long cmd, char* argp)$/;"	f	class:kit::Socket	signature:(unsigned long cmd, char* argp)
kit::Socket::listen	.//network/platform/win/Socket.cpp	/^int32_t Socket::listen(int32_t count)$/;"	f	class:kit::Socket	signature:(int32_t count)
kit::Socket::open	.//network/platform/win/Socket.cpp	/^void Socket::open()$/;"	f	class:kit::Socket	signature:()
kit::Socket::recv	.//network/platform/win/Socket.cpp	/^int32_t Socket::recv(char* buf, int32_t size, int32_t mode)$/;"	f	class:kit::Socket	signature:(char* buf, int32_t size, int32_t mode)
kit::Socket::recvFrom	.//network/platform/win/Socket.cpp	/^int32_t Socket::recvFrom(char* buf, int32_t size, int32_t mode, sockaddr *addr)$/;"	f	class:kit::Socket	signature:(char* buf, int32_t size, int32_t mode, sockaddr *addr)
kit::Socket::send	.//network/platform/win/Socket.cpp	/^int32_t Socket::send(const char* buf, int32_t size, int32_t mode)$/;"	f	class:kit::Socket	signature:(const char* buf, int32_t size, int32_t mode)
kit::Socket::sendTo	.//network/platform/win/Socket.cpp	/^int32_t Socket::sendTo(const char* buf, int32_t size, int32_t mode, const sockaddr* addr)$/;"	f	class:kit::Socket	signature:(const char* buf, int32_t size, int32_t mode, const sockaddr* addr)
kit::Socket::setHandle	.//network/platform/win/Socket.cpp	/^void Socket::setHandle(int32_t sock)$/;"	f	class:kit::Socket	signature:(int32_t sock)
kit::Socket::setOption	.//network/platform/win/Socket.cpp	/^int32_t Socket::setOption(int32_t level, int32_t optname, const char* optval, int32_t optlen)$/;"	f	class:kit::Socket	signature:(int32_t level, int32_t optname, const char* optval, int32_t optlen)
kit::Socket::shutdown	.//network/platform/win/Socket.cpp	/^int32_t Socket::shutdown(int32_t mode)$/;"	f	class:kit::Socket	signature:(int32_t mode)
kit::Socket::~Socket	.//network/platform/win/Socket.cpp	/^Socket::~Socket()$/;"	f	class:kit::Socket	signature:()
kit::Thread	.//base/Thread.h	/^class Thread : public Ref$/;"	c	namespace:kit	inherits:Ref
kit::Thread::Thread	.//base/Thread.h	/^    Thread();$/;"	p	class:kit::Thread	access:public	signature:()
kit::Thread::join	.//base/Thread.h	/^    void join();$/;"	p	class:kit::Thread	access:public	signature:()
kit::Thread::start	.//base/Thread.h	/^    int start();$/;"	p	class:kit::Thread	access:public	signature:()
kit::Thread::stop	.//base/Thread.h	/^    int stop();$/;"	p	class:kit::Thread	access:public	signature:()
kit::Thread::~Thread	.//base/Thread.h	/^    virtual ~Thread();$/;"	p	class:kit::Thread	access:public	signature:()
kit::get_cpu_tick	.//base/kitsys.cpp	/^static uint64_t get_cpu_tick()$/;"	f	namespace:kit	signature:()
kit::get_num_from_sysfile	.//base/kitsys.cpp	/^static int64_t get_num_from_sysfile( const char* _name, const char* _head )$/;"	f	namespace:kit	signature:( const char* _name, const char* _head )
kit::readPacketInfo	.//network/Packet.cpp	/^void readPacketInfo(Buffer* buf, PacketHeader& header)$/;"	f	namespace:kit	signature:(Buffer* buf, PacketHeader& header)
kit::readPacketInfo	.//network/Packet.h	/^void readPacketInfo(Buffer* buf, PacketHeader& header);$/;"	p	namespace:kit	signature:(Buffer* buf, PacketHeader& header)
kit::sleep	.//base/kitsys.cpp	/^void sleep(uint32_t msec)$/;"	f	namespace:kit	signature:(uint32_t msec)
kit::sleep	.//base/kitsys.h	/^void sleep(uint32_t msec);$/;"	p	namespace:kit	signature:(uint32_t msec)
kit::thread_start	.//network/platform/linux/Client_linux.cpp	/^void* thread_start(void* p)$/;"	f	namespace:kit	signature:(void* p)
kit::thread_start	.//network/platform/linux/Server_linux.cpp	/^void* thread_start(void* p)$/;"	f	namespace:kit	signature:(void* p)
kit::tick	.//base/kitsys.cpp	/^static inline uint64_t tick()$/;"	f	namespace:kit	signature:()
kit::time	.//base/kitsys.cpp	/^uint32_t time()$/;"	f	namespace:kit	signature:()
kit::time	.//base/kitsys.h	/^uint32_t time();$/;"	p	namespace:kit	signature:()
kit::writePacketInfo	.//network/Packet.cpp	/^void writePacketInfo(Buffer* buf, const PacketHeader& header)$/;"	f	namespace:kit	signature:(Buffer* buf, const PacketHeader& header)
kit::writePacketInfo	.//network/Packet.h	/^void writePacketInfo(Buffer* buf, const PacketHeader& header);$/;"	p	namespace:kit	signature:(Buffer* buf, const PacketHeader& header)
length	.//network/Packet.h	/^    uint16_t length;$/;"	m	struct:kit::PacketHeader	access:public
listen	.//network/Socket.cpp	/^int32_t ISocket::listen(int32_t count)$/;"	f	class:kit::ISocket	signature:(int32_t count)
listen	.//network/Socket.h	/^	int32_t listen(int32_t count);$/;"	p	class:kit::ISocket	access:public	signature:(int32_t count)
listen	.//network/platform/win/Socket.cpp	/^int32_t Socket::listen(int32_t count)$/;"	f	class:kit::Socket	signature:(int32_t count)
logic	.//Application.h	/^    virtual void logic() = 0;$/;"	p	class:kit::Application	access:public	signature:()
logic	.//test/app_client.cpp	/^void App::logic()$/;"	f	class:App	signature:()
logic	.//test/app_client.h	/^    virtual void logic();$/;"	p	class:App	access:public	signature:()
logic	.//test/app_server.cpp	/^void App::logic()$/;"	f	class:App	signature:()
logic	.//test/app_server.h	/^    virtual void logic();$/;"	p	class:App	access:public	signature:()
main	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main	.//test/client/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	signature:(int argc, char** argv)
main	.//test/main_client.cpp	/^int main()$/;"	f	signature:()
main	.//test/main_server.cpp	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main	.//test/server/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	signature:(int argc, char** argv)
mainLoop	.//Application.cpp	/^void Application::mainLoop()$/;"	f	class:kit::Application	signature:()
mainLoop	.//Application.h	/^    void mainLoop();$/;"	p	class:kit::Application	access:public	signature:()
next	.//base/Array.h	/^        int next;$/;"	m	struct:kit::Array::Item	access:public
next	.//base/Array.h	/^    bool next(Type& val)$/;"	f	class:kit::Array	access:public	signature:(Type& val)
next	.//base/HashList.h	/^    int next;$/;"	m	struct:kit::HLElement	access:public
next	.//base/List.h	/^        Item* next;$/;"	m	struct:kit::List::Item	access:public
next_delta_zero_	.//Application.h	/^    bool next_delta_zero_;$/;"	m	class:kit::Application	access:protected
open	.//network/Socket.cpp	/^void ISocket::open()$/;"	f	class:kit::ISocket	signature:()
open	.//network/Socket.h	/^	void open();$/;"	p	class:kit::ISocket	access:public	signature:()
open	.//network/platform/win/Socket.cpp	/^void Socket::open()$/;"	f	class:kit::Socket	signature:()
operator <<	.//base/Buffer.h	/^	Buffer& operator<<(T v);$/;"	p	class:kit::Buffer	access:public	signature:(T v)
operator <<	.//base/Buffer.h	/^inline Buffer& Buffer::operator<< <const char*>(const char* v)$/;"	f	class:kit::Buffer	signature:(const char* v)
operator <<	.//base/Buffer.h	/^inline Buffer& Buffer::operator<<(T v)$/;"	f	class:kit::Buffer	signature:(T v)
operator >>	.//base/Buffer.h	/^	Buffer& operator>>(T& v);$/;"	p	class:kit::Buffer	access:public	signature:(T& v)
operator >>	.//base/Buffer.h	/^inline Buffer& Buffer::operator>> <char*>(char*& v)$/;"	f	class:kit::Buffer	signature:(char*& v)
operator >>	.//base/Buffer.h	/^inline Buffer& Buffer::operator>>(T& v)$/;"	f	class:kit::Buffer	signature:(T& v)
operator sockaddr*	.//network/SockAddr.h	/^    operator sockaddr*() { return (sockaddr*)addr_; }$/;"	f	class:kit::ISockAddr	access:public	signature:()
operator sockaddr_in*	.//network/SockAddr.h	/^    operator sockaddr_in*() { return (sockaddr_in*)addr_; }$/;"	f	class:kit::ISockAddr	access:public	signature:()
packet_seed_	.//network/Socket.h	/^    uint32_t packet_seed_;$/;"	m	class:kit::ISocket	access:private
poll_fd_	.//network/platform/linux/Client_linux.h	/^    int32_t poll_fd_;$/;"	m	class:kit::Client	access:private
poll_fd_	.//network/platform/linux/Server_linux.h	/^    int32_t poll_fd_;$/;"	m	class:kit::Server	access:private
pool_vec_	.//base/RefPool.h	/^    PoolVec pool_vec_;$/;"	m	class:kit::RefPoolManager	access:private
pop	.//base/List.h	/^    bool pop(Type& value)$/;"	f	class:kit::List	access:public	signature:(Type& value)
pop	.//base/Queue.h	/^    bool pop(Type& value)$/;"	f	class:kit::Queue	access:public	signature:(Type& value)
pop	.//base/RefPool.cpp	/^void RefPoolManager::pop()$/;"	f	class:kit::RefPoolManager	signature:()
pop	.//base/RefPool.h	/^    void pop();$/;"	p	class:kit::RefPoolManager	access:public	signature:()
port	.//network/SockAddr.h	/^    uint16_t port;$/;"	m	class:kit::ISockAddr	access:public
pos_	.//base/Array.h	/^    int pos_;$/;"	m	class:kit::Array	access:private
prev	.//base/Array.h	/^        int prev;$/;"	m	struct:kit::Array::Item	access:public
prev	.//base/HashList.h	/^    int prev;$/;"	m	struct:kit::HLElement	access:public
prev	.//base/List.h	/^        Item* prev;$/;"	m	struct:kit::List::Item	access:public
push	.//base/List.h	/^    bool push(const Type& item)$/;"	f	class:kit::List	access:public	signature:(const Type& item)
push	.//base/Queue.h	/^    bool push(const Type& value)$/;"	f	class:kit::Queue	access:public	signature:(const Type& value)
push	.//base/RefPool.cpp	/^void RefPoolManager::push(RefPool* pool)$/;"	f	class:kit::RefPoolManager	signature:(RefPool* pool)
push	.//base/RefPool.h	/^    void push(RefPool* pool);$/;"	p	class:kit::RefPoolManager	access:public	signature:(RefPool* pool)
qnxnto	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
que_	.//base/Queue.h	/^    Type que_[Length];$/;"	m	class:kit::Queue	access:private
ques_	.//base/BufferPool.h	/^    BufferQue ques_[BUFFER_QUEUE_CNT];$/;"	m	class:kit::BufferPool	access:private
readBuffer	.//base/Buffer.cpp	/^bool Buffer::readBuffer(void* buf, uint32_t size)$/;"	f	class:kit::Buffer	signature:(void* buf, uint32_t size)
readBuffer	.//base/Buffer.h	/^	bool readBuffer(void* buf, uint32_t size);$/;"	p	class:kit::Buffer	access:public	signature:(void* buf, uint32_t size)
readPacketInfo	.//network/Packet.cpp	/^void readPacketInfo(Buffer* buf, PacketHeader& header)$/;"	f	namespace:kit	signature:(Buffer* buf, PacketHeader& header)
readPacketInfo	.//network/Packet.h	/^void readPacketInfo(Buffer* buf, PacketHeader& header);$/;"	p	namespace:kit	signature:(Buffer* buf, PacketHeader& header)
read_cur_	.//base/Buffer.h	/^    char* read_cur_;$/;"	m	class:kit::Buffer	access:public
readyOut_	.//network/Socket.h	/^    bool readyOut_;$/;"	m	class:kit::ISocket	access:public
recv	.//network/Socket.cpp	/^int32_t ISocket::recv(char* buf, int32_t size, int32_t mode)$/;"	f	class:kit::ISocket	signature:(char* buf, int32_t size, int32_t mode)
recv	.//network/Socket.h	/^	int32_t recv(char* buf, int32_t size, int32_t mode = 0);$/;"	p	class:kit::ISocket	access:public	signature:(char* buf, int32_t size, int32_t mode = 0)
recv	.//network/platform/win/Socket.cpp	/^int32_t Socket::recv(char* buf, int32_t size, int32_t mode)$/;"	f	class:kit::Socket	signature:(char* buf, int32_t size, int32_t mode)
recvBuffer	.//network/Socket.cpp	/^int32_t ISocket::recvBuffer(Buffer* buf)$/;"	f	class:kit::ISocket	signature:(Buffer* buf)
recvBuffer	.//network/Socket.h	/^    int32_t recvBuffer(Buffer* buf);$/;"	p	class:kit::ISocket	access:protected	signature:(Buffer* buf)
recvClear	.//network/Socket.cpp	/^void ISocket::recvClear()$/;"	f	class:kit::ISocket	signature:()
recvClear	.//network/Socket.h	/^    void recvClear();$/;"	p	class:kit::ISocket	access:protected	signature:()
recvFrom	.//network/Socket.cpp	/^int32_t ISocket::recvFrom(char* buf, int32_t size, int32_t mode, SockAddr *addr)$/;"	f	class:kit::ISocket	signature:(char* buf, int32_t size, int32_t mode, SockAddr *addr)
recvFrom	.//network/Socket.h	/^	int32_t recvFrom(char* buf, int32_t size, int32_t mode, SockAddr* addr);$/;"	p	class:kit::ISocket	access:public	signature:(char* buf, int32_t size, int32_t mode, SockAddr* addr)
recvFrom	.//network/platform/win/Socket.cpp	/^int32_t Socket::recvFrom(char* buf, int32_t size, int32_t mode, sockaddr *addr)$/;"	f	class:kit::Socket	signature:(char* buf, int32_t size, int32_t mode, sockaddr *addr)
recv_buf_	.//network/Socket.h	/^    Buffer* recv_buf_;$/;"	m	class:kit::ISocket	access:private
recv_count_	.//network/Socket.h	/^    uint32_t recv_count_;$/;"	m	class:kit::ISocket	access:private
recv_head_buf_	.//network/Socket.h	/^    Buffer* recv_head_buf_;$/;"	m	class:kit::ISocket	access:private
recv_list_	.//network/Socket.h	/^    List<Buffer*> recv_list_;$/;"	m	class:kit::ISocket	access:private
recv_que_	.//network/Socket.h	/^    BufferQue recv_que_;$/;"	m	class:kit::ISocket	access:private
ref	.//base/HashList.h	/^        Ref* ref;$/;"	m	union:kit::HLElement::__anon1	access:public
ref_vec_	.//base/RefPool.h	/^    RefVec ref_vec_;$/;"	m	class:kit::RefPool	access:private
reference_count_	.//base/Ref.h	/^    unsigned int reference_count_;$/;"	m	class:kit::Ref	access:protected
release	.//base/Ref.cpp	/^void Ref::release()$/;"	f	class:kit::Ref	signature:()
release	.//base/Ref.h	/^    void release();$/;"	p	class:kit::Ref	access:public	signature:()
release	.//base/Singleton.h	/^    static void release(void)$/;"	f	class:kit::Singleton	access:public	signature:(void)
reset	.//base/Buffer.h	/^    void reset() { write_cur_ = head_; read_cur_ = head_; };$/;"	f	class:kit::Buffer	access:public	signature:()
resetNext	.//base/Array.h	/^    void resetNext() { pos_ = head_; }$/;"	f	class:kit::Array	access:public	signature:()
rest	.//base/Queue.h	/^    int rest()$/;"	f	class:kit::Queue	access:public	signature:()
retain	.//base/Ref.cpp	/^void Ref::retain()$/;"	f	class:kit::Ref	signature:()
retain	.//base/Ref.h	/^    void retain();$/;"	p	class:kit::Ref	access:public	signature:()
run	.//Application.cpp	/^void Application::run()$/;"	f	class:kit::Application	signature:()
run	.//Application.h	/^    virtual void run();$/;"	p	class:kit::Application	access:public	signature:()
run	.//network/platform/linux/Client_linux.cpp	/^void Client::run()$/;"	f	class:kit::Client	signature:()
run	.//network/platform/linux/Client_linux.h	/^    void run();$/;"	p	class:kit::Client	access:public	signature:()
run	.//network/platform/linux/Server_linux.cpp	/^void Server::run()$/;"	f	class:kit::Server	signature:()
run	.//network/platform/linux/Server_linux.h	/^    void run();$/;"	p	class:kit::Server	access:public	signature:()
run	.//test/app_client.cpp	/^void App::run()$/;"	f	class:App	signature:()
run	.//test/app_client.h	/^    virtual void run();$/;"	p	class:App	access:public	signature:()
run	.//test/app_server.cpp	/^void App::run()$/;"	f	class:App	signature:()
run	.//test/app_server.h	/^    virtual void run();$/;"	p	class:App	access:public	signature:()
seed	.//network/Packet.h	/^    uint16_t seed;$/;"	m	struct:kit::PacketHeader	access:public
send	.//network/Socket.cpp	/^int32_t ISocket::send(const char* buf, int32_t size, int32_t mode)$/;"	f	class:kit::ISocket	signature:(const char* buf, int32_t size, int32_t mode)
send	.//network/Socket.h	/^	int32_t send(const char* buf, int32_t size, int32_t mode = 0);$/;"	p	class:kit::ISocket	access:public	signature:(const char* buf, int32_t size, int32_t mode = 0)
send	.//network/platform/win/Socket.cpp	/^int32_t Socket::send(const char* buf, int32_t size, int32_t mode)$/;"	f	class:kit::Socket	signature:(const char* buf, int32_t size, int32_t mode)
sendBuffer	.//network/Socket.cpp	/^int32_t ISocket::sendBuffer(Buffer* buf)$/;"	f	class:kit::ISocket	signature:(Buffer* buf)
sendBuffer	.//network/Socket.h	/^    int32_t sendBuffer(Buffer* buf);$/;"	p	class:kit::ISocket	access:protected	signature:(Buffer* buf)
sendPacket	.//network/Socket.cpp	/^int32_t ISocket::sendPacket(Buffer* buf)$/;"	f	class:kit::ISocket	signature:(Buffer* buf)
sendPacket	.//network/Socket.h	/^    int32_t sendPacket(Buffer* buf);$/;"	p	class:kit::ISocket	access:public	signature:(Buffer* buf)
sendTo	.//network/Socket.cpp	/^int32_t ISocket::sendTo(const char* buf, int32_t size, int32_t mode, SockAddr* addr)$/;"	f	class:kit::ISocket	signature:(const char* buf, int32_t size, int32_t mode, SockAddr* addr)
sendTo	.//network/Socket.h	/^	int32_t sendTo(const char* buf, int32_t size, int32_t mode, SockAddr* addr);$/;"	p	class:kit::ISocket	access:public	signature:(const char* buf, int32_t size, int32_t mode, SockAddr* addr)
sendTo	.//network/platform/win/Socket.cpp	/^int32_t Socket::sendTo(const char* buf, int32_t size, int32_t mode, const sockaddr* addr)$/;"	f	class:kit::Socket	signature:(const char* buf, int32_t size, int32_t mode, const sockaddr* addr)
send_buf_	.//network/Socket.h	/^    Buffer* send_buf_;$/;"	m	class:kit::ISocket	access:private
send_bufs_	.//network/Socket.h	/^    Buffer* send_bufs_;$/;"	m	class:kit::ISocket	access:private
send_head_buf_	.//network/Socket.h	/^    Buffer* send_head_buf_;$/;"	m	class:kit::ISocket	access:private
send_list_	.//network/Socket.h	/^    List<Buffer*> send_list_;$/;"	m	class:kit::ISocket	access:private
send_que_	.//network/Socket.h	/^    BufferQue send_que_;$/;"	m	class:kit::ISocket	access:private
server_	.//test/app_server.h	/^    kit::Server* server_;$/;"	m	class:App	access:private
setAPI	.//base/Logger.cpp	/^void Logger::setAPI(int t, Logger::LoggerAPI api)$/;"	f	class:kit::Logger	signature:(int t, Logger::LoggerAPI api)
setAPI	.//base/Logger.h	/^    void setAPI(int t, LoggerAPI api);$/;"	p	class:kit::Logger	access:public	signature:(int t, LoggerAPI api)
setAddr	.//network/Socket.cpp	/^void ISocket::setAddr(SockAddr* addr)$/;"	f	class:kit::ISocket	signature:(SockAddr* addr)
setAddr	.//network/Socket.h	/^    void setAddr(SockAddr* addr);$/;"	p	class:kit::ISocket	access:public	signature:(SockAddr* addr)
setFrameRate	.//Application.cpp	/^void Application::setFrameRate(unsigned int rate)$/;"	f	class:kit::Application	signature:(unsigned int rate)
setFrameRate	.//Application.h	/^    void setFrameRate(uint32_t rate);$/;"	p	class:kit::Application	access:public	signature:(uint32_t rate)
setHandle	.//network/Socket.cpp	/^void ISocket::setHandle(int32_t sock)$/;"	f	class:kit::ISocket	signature:(int32_t sock)
setHandle	.//network/Socket.h	/^	void setHandle(int32_t _sock);$/;"	p	class:kit::ISocket	access:public	signature:(int32_t _sock)
setHandle	.//network/platform/win/Socket.cpp	/^void Socket::setHandle(int32_t sock)$/;"	f	class:kit::Socket	signature:(int32_t sock)
setNextDeltaZero	.//Application.h	/^    void setNextDeltaZero(bool zero) { next_delta_zero_ = zero; }$/;"	f	class:kit::Application	access:public	signature:(bool zero)
setOption	.//network/Socket.cpp	/^int32_t ISocket::setOption(int32_t level, int32_t optname, const char* optval, int32_t optlen)$/;"	f	class:kit::ISocket	signature:(int32_t level, int32_t optname, const char* optval, int32_t optlen)
setOption	.//network/Socket.h	/^	int32_t setOption(int32_t level, int32_t optname, const char* optval, int32_t optlen);$/;"	p	class:kit::ISocket	access:public	signature:(int32_t level, int32_t optname, const char* optval, int32_t optlen)
setOption	.//network/platform/win/Socket.cpp	/^int32_t Socket::setOption(int32_t level, int32_t optname, const char* optval, int32_t optlen)$/;"	f	class:kit::Socket	signature:(int32_t level, int32_t optname, const char* optval, int32_t optlen)
setTimeval	.//network/Client.h	/^    inline void setTimeval(int32_t timeval) { timeval_ = timeval; }$/;"	f	class:kit::IClient	access:public	signature:(int32_t timeval)
setTimeval	.//network/Server.h	/^    inline void setTimeval(int32_t timeval) { timeval_ = timeval; }$/;"	f	class:kit::IServer	access:public	signature:(int32_t timeval)
shutdown	.//network/Client.cpp	/^int32_t IClient::shutdown()$/;"	f	class:kit::IClient	signature:()
shutdown	.//network/Client.h	/^	virtual int32_t shutdown();$/;"	p	class:kit::IClient	access:public	signature:()
shutdown	.//network/Server.cpp	/^int32_t IServer::shutdown()$/;"	f	class:kit::IServer	signature:()
shutdown	.//network/Server.h	/^	virtual int32_t shutdown();$/;"	p	class:kit::IServer	access:public	signature:()
shutdown	.//network/Socket.cpp	/^int32_t ISocket::shutdown(int32_t mode)$/;"	f	class:kit::ISocket	signature:(int32_t mode)
shutdown	.//network/Socket.h	/^	int32_t shutdown(int32_t mode);$/;"	p	class:kit::ISocket	access:public	signature:(int32_t mode)
shutdown	.//network/platform/linux/Client_linux.cpp	/^int32_t Client::shutdown()$/;"	f	class:kit::Client	signature:()
shutdown	.//network/platform/linux/Client_linux.h	/^	virtual int32_t shutdown();$/;"	p	class:kit::Client	access:public	signature:()
shutdown	.//network/platform/linux/Server_linux.cpp	/^int32_t Server::shutdown()$/;"	f	class:kit::Server	signature:()
shutdown	.//network/platform/linux/Server_linux.h	/^	virtual int32_t shutdown();$/;"	p	class:kit::Server	access:public	signature:()
shutdown	.//network/platform/win/Server.cpp	/^void Server::shutdown()$/;"	f	class:kit::Server	signature:()
shutdown	.//network/platform/win/Socket.cpp	/^int32_t Socket::shutdown(int32_t mode)$/;"	f	class:kit::Socket	signature:(int32_t mode)
skipRead	.//base/Buffer.h	/^    void skipRead(uint32_t size) { read_cur_ += size; }$/;"	f	class:kit::Buffer	access:public	signature:(uint32_t size)
skipWrite	.//base/Buffer.h	/^    void skipWrite(uint32_t size) { write_cur_ += size; }$/;"	f	class:kit::Buffer	access:public	signature:(uint32_t size)
sleep	.//base/kitsys.cpp	/^void sleep(uint32_t msec)$/;"	f	namespace:kit	signature:(uint32_t msec)
sleep	.//base/kitsys.h	/^void sleep(uint32_t msec);$/;"	p	namespace:kit	signature:(uint32_t msec)
sock_	.//network/Socket.h	/^	int32_t sock_;$/;"	m	class:kit::ISocket	access:protected
socket_	.//network/Client.h	/^	Socket* socket_;$/;"	m	class:kit::IClient	access:protected
socket_	.//network/Server.h	/^	Socket* socket_;$/;"	m	class:kit::IServer	access:protected
socket_array_	.//network/Server.h	/^    Array<Socket*, CONNECTION_LIMIT> socket_array_;$/;"	m	class:kit::IServer	access:protected
spareLogic	.//Application.h	/^    virtual uint32_t spareLogic(uint32_t spare_time) { return spare_time; };$/;"	f	class:kit::Application	access:public	signature:(uint32_t spare_time)
spareLogic	.//test/app_client.cpp	/^uint32_t App::spareLogic(uint32_t spare_time)$/;"	f	class:App	signature:(uint32_t spare_time)
spareLogic	.//test/app_client.h	/^    virtual uint32_t spareLogic(uint32_t spare_time);$/;"	p	class:App	access:public	signature:(uint32_t spare_time)
spareLogic	.//test/app_server.cpp	/^uint32_t App::spareLogic(uint32_t spare_time)$/;"	f	class:App	signature:(uint32_t spare_time)
spareLogic	.//test/app_server.h	/^    virtual uint32_t spareLogic(uint32_t spare_time);$/;"	p	class:App	access:public	signature:(uint32_t spare_time)
start	.//base/Thread.h	/^    int start();$/;"	p	class:kit::Thread	access:public	signature:()
start_server	.//test/main_server.cpp	/^void start_server()$/;"	f	signature:()
startup	.//network/Client.cpp	/^int32_t IClient::startup(const char* ip, int32_t port)$/;"	f	class:kit::IClient	signature:(const char* ip, int32_t port)
startup	.//network/Client.h	/^	virtual int32_t startup(const char* ip, int32_t port);$/;"	p	class:kit::IClient	access:public	signature:(const char* ip, int32_t port)
startup	.//network/Server.cpp	/^int32_t IServer::startup(const char* ip, int32_t port)$/;"	f	class:kit::IServer	signature:(const char* ip, int32_t port)
startup	.//network/Server.h	/^	virtual int32_t startup(const char* ip, int32_t port);$/;"	p	class:kit::IServer	access:public	signature:(const char* ip, int32_t port)
startup	.//network/platform/linux/Client_linux.cpp	/^int32_t Client::startup(const char* ip, int32_t port)$/;"	f	class:kit::Client	signature:(const char* ip, int32_t port)
startup	.//network/platform/linux/Client_linux.h	/^	virtual int32_t startup(const char* ip, int32_t port);$/;"	p	class:kit::Client	access:public	signature:(const char* ip, int32_t port)
startup	.//network/platform/linux/Server_linux.cpp	/^int32_t Server::startup(const char* ip, int32_t port)$/;"	f	class:kit::Server	signature:(const char* ip, int32_t port)
startup	.//network/platform/linux/Server_linux.h	/^	virtual int32_t startup(const char* ip, int32_t port);$/;"	p	class:kit::Server	access:public	signature:(const char* ip, int32_t port)
startup	.//network/platform/win/Server.cpp	/^void Server::startup(const char* ip, int32_t port)$/;"	f	class:kit::Server	signature:(const char* ip, int32_t port)
stop	.//Application.cpp	/^void Application::stop()$/;"	f	class:kit::Application	signature:()
stop	.//Application.h	/^    virtual void stop();$/;"	p	class:kit::Application	access:public	signature:()
stop	.//base/Thread.h	/^    int stop();$/;"	p	class:kit::Thread	access:public	signature:()
stop	.//test/app_client.cpp	/^void App::stop()$/;"	f	class:App	signature:()
stop	.//test/app_client.h	/^    virtual void stop();$/;"	p	class:App	access:public	signature:()
stop	.//test/app_server.cpp	/^void App::stop()$/;"	f	class:App	signature:()
stop	.//test/app_server.h	/^    virtual void stop();$/;"	p	class:App	access:public	signature:()
tail_	.//base/Array.h	/^    int tail_;$/;"	m	class:kit::Array	access:private
tail_	.//base/Buffer.h	/^    char* tail_;$/;"	m	class:kit::Buffer	access:public
tail_	.//base/List.h	/^    Item* tail_;$/;"	m	class:kit::List	access:private
tail_	.//base/Queue.h	/^    int tail_;$/;"	m	class:kit::Queue	access:private
test	.//test/main_server.cpp	/^void test(int a[])$/;"	f	signature:(int a[])
test_array	.//test/main_client.cpp	/^void test_array()$/;"	f	signature:()
test_array	.//test/main_server.cpp	/^void test_array()$/;"	f	signature:()
test_hash_list	.//test/main_server.cpp	/^void test_hash_list()$/;"	f	signature:()
test_hl_vec	.//test/main_server.cpp	/^void test_hl_vec()$/;"	f	signature:()
test_list	.//test/main_client.cpp	/^void test_list()$/;"	f	signature:()
test_que	.//test/main_server.cpp	/^void test_que()$/;"	f	signature:()
test_server	.//test/main_server.cpp	/^void test_server()$/;"	f	signature:()
test_tick	.//test/main_server.cpp	/^void test_tick()$/;"	f	signature:()
thread_id_	.//network/platform/linux/Client_linux.h	/^    int64_t thread_id_;$/;"	m	class:kit::Client	access:private
thread_id_	.//network/platform/linux/Server_linux.h	/^    int64_t thread_id_;$/;"	m	class:kit::Server	access:private
thread_start	.//network/platform/linux/Client_linux.cpp	/^void* thread_start(void* p)$/;"	f	namespace:kit	signature:(void* p)
thread_start	.//network/platform/linux/Server_linux.cpp	/^void* thread_start(void* p)$/;"	f	namespace:kit	signature:(void* p)
tick	.//base/kitsys.cpp	/^static inline uint64_t tick()$/;"	f	namespace:kit	signature:()
time	.//base/kitsys.cpp	/^uint32_t time()$/;"	f	namespace:kit	signature:()
time	.//base/kitsys.h	/^uint32_t time();$/;"	p	namespace:kit	signature:()
timeval_	.//network/Client.h	/^    int32_t timeval_;$/;"	m	class:kit::IClient	access:protected
timeval_	.//network/Server.h	/^    int32_t timeval_;$/;"	m	class:kit::IServer	access:protected
u	.//base/HashList.h	/^    }u;$/;"	m	struct:kit::HLElement	typeref:union:kit::HLElement::__anon1	access:public
update	.//network/Client.cpp	/^void IClient::update()$/;"	f	class:kit::IClient	signature:()
update	.//network/Client.h	/^    virtual void update() = 0;$/;"	p	class:kit::IClient	access:public	signature:()
update	.//network/Server.cpp	/^void IServer::update()$/;"	f	class:kit::IServer	signature:()
update	.//network/Server.h	/^    virtual void update() = 0;$/;"	p	class:kit::IServer	access:public	signature:()
update	.//network/platform/linux/Client_linux.cpp	/^void Client::update()$/;"	f	class:kit::Client	signature:()
update	.//network/platform/linux/Client_linux.h	/^    virtual void update();$/;"	p	class:kit::Client	access:public	signature:()
update	.//network/platform/linux/Server_linux.cpp	/^void Server::update()$/;"	f	class:kit::Server	signature:()
update	.//network/platform/linux/Server_linux.h	/^    virtual void update();$/;"	p	class:kit::Server	access:public	signature:()
valid	.//network/SockAddr.h	/^    bool valid() const { return valid_; }$/;"	f	class:kit::ISockAddr	access:public	signature:() const
valid	.//network/Socket.h	/^    bool valid() const { return valid_; }$/;"	f	class:kit::ISocket	access:public	signature:() const
valid_	.//Application.h	/^    bool valid_;$/;"	m	class:kit::Application	access:protected
valid_	.//network/SockAddr.h	/^    bool valid_;$/;"	m	class:kit::ISockAddr	access:protected
valid_	.//network/Socket.h	/^    bool valid_;$/;"	m	class:kit::ISocket	access:public
value	.//base/Array.h	/^        Type value;$/;"	m	struct:kit::Array::Item	access:public
value	.//base/List.h	/^        Type value;$/;"	m	struct:kit::List::Item	access:public
volatile	.//test/client/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
volatile	.//test/server/CMakeFiles/3.10.0-rc3/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
wait_time_	.//Application.h	/^    uint32_t wait_time_;$/;"	m	class:kit::Application	access:private
writeBuffer	.//base/Buffer.cpp	/^bool Buffer::writeBuffer(const void* buf, uint32_t size)$/;"	f	class:kit::Buffer	signature:(const void* buf, uint32_t size)
writeBuffer	.//base/Buffer.h	/^    bool writeBuffer(const void* buf, uint32_t size);$/;"	p	class:kit::Buffer	access:public	signature:(const void* buf, uint32_t size)
writeLog	.//base/Logger.h	/^    void writeLog(const char* format, ...)$/;"	f	class:kit::Logger	access:public	signature:(const char* format, ...)
writeNone	.//base/Logger.h	/^    void writeNone(const char* format, ...) {};$/;"	f	class:kit::Logger	access:public	signature:(const char* format, ...)
writePacketInfo	.//network/Packet.cpp	/^void writePacketInfo(Buffer* buf, const PacketHeader& header)$/;"	f	namespace:kit	signature:(Buffer* buf, const PacketHeader& header)
writePacketInfo	.//network/Packet.h	/^void writePacketInfo(Buffer* buf, const PacketHeader& header);$/;"	p	namespace:kit	signature:(Buffer* buf, const PacketHeader& header)
write_cur_	.//base/Buffer.h	/^    char* write_cur_;$/;"	m	class:kit::Buffer	access:public
~App	.//test/app_client.cpp	/^App::~App()$/;"	f	class:App	signature:()
~App	.//test/app_client.h	/^    virtual ~App();$/;"	p	class:App	access:public	signature:()
~App	.//test/app_server.cpp	/^App::~App()$/;"	f	class:App	signature:()
~App	.//test/app_server.h	/^    virtual ~App();$/;"	p	class:App	access:public	signature:()
~Application	.//Application.cpp	/^Application::~Application()$/;"	f	class:kit::Application	signature:()
~Application	.//Application.h	/^    virtual ~Application();$/;"	p	class:kit::Application	access:public	signature:()
~Buffer	.//base/Buffer.cpp	/^Buffer::~Buffer()$/;"	f	class:kit::Buffer	signature:()
~Buffer	.//base/Buffer.h	/^    virtual ~Buffer();$/;"	p	class:kit::Buffer	access:public	signature:()
~BufferPool	.//base/BufferPool.cpp	/^BufferPool::~BufferPool()$/;"	f	class:kit::BufferPool	signature:()
~BufferPool	.//base/BufferPool.h	/^    virtual ~BufferPool();$/;"	p	class:kit::BufferPool	access:public	signature:()
~Client	.//network/platform/linux/Client_linux.cpp	/^Client::~Client()$/;"	f	class:kit::Client	signature:()
~Client	.//network/platform/linux/Client_linux.h	/^    virtual ~Client();$/;"	p	class:kit::Client	access:public	signature:()
~IClient	.//network/Client.cpp	/^IClient::~IClient()$/;"	f	class:kit::IClient	signature:()
~IClient	.//network/Client.h	/^    virtual ~IClient();$/;"	p	class:kit::IClient	access:public	signature:()
~IServer	.//network/Server.cpp	/^IServer::~IServer()$/;"	f	class:kit::IServer	signature:()
~IServer	.//network/Server.h	/^    virtual ~IServer();$/;"	p	class:kit::IServer	access:public	signature:()
~ISockAddr	.//network/SockAddr.cpp	/^ISockAddr::~ISockAddr()$/;"	f	class:kit::ISockAddr	signature:()
~ISockAddr	.//network/SockAddr.h	/^    virtual ~ISockAddr();$/;"	p	class:kit::ISockAddr	access:public	signature:()
~ISocket	.//network/Socket.cpp	/^ISocket::~ISocket()$/;"	f	class:kit::ISocket	signature:()
~ISocket	.//network/Socket.h	/^	virtual ~ISocket();$/;"	p	class:kit::ISocket	access:public	signature:()
~Logger	.//base/Logger.cpp	/^Logger::~Logger()$/;"	f	class:kit::Logger	signature:()
~Logger	.//base/Logger.h	/^    ~Logger();$/;"	p	class:kit::Logger	access:public	signature:()
~Ref	.//base/Ref.cpp	/^Ref::~Ref()$/;"	f	class:kit::Ref	signature:()
~Ref	.//base/Ref.h	/^    virtual ~Ref();$/;"	p	class:kit::Ref	access:public	signature:()
~RefPool	.//base/RefPool.cpp	/^RefPool::~RefPool()$/;"	f	class:kit::RefPool	signature:()
~RefPool	.//base/RefPool.h	/^    virtual ~RefPool();$/;"	p	class:kit::RefPool	access:public	signature:()
~RefPoolManager	.//base/RefPool.cpp	/^RefPoolManager::~RefPoolManager()$/;"	f	class:kit::RefPoolManager	signature:()
~RefPoolManager	.//base/RefPool.h	/^    virtual ~RefPoolManager();$/;"	p	class:kit::RefPoolManager	access:public	signature:()
~Server	.//network/platform/linux/Server_linux.cpp	/^Server::~Server()$/;"	f	class:kit::Server	signature:()
~Server	.//network/platform/linux/Server_linux.h	/^    virtual ~Server();$/;"	p	class:kit::Server	access:public	signature:()
~Server	.//network/platform/win/Server.cpp	/^Server::~Server()$/;"	f	class:kit::Server	signature:()
~SockAddr	.//network/platform/linux/SockAddr_linux.cpp	/^SockAddr::~SockAddr()$/;"	f	class:kit::SockAddr	signature:()
~SockAddr	.//network/platform/linux/SockAddr_linux.h	/^    virtual ~SockAddr();$/;"	p	class:kit::SockAddr	access:public	signature:()
~SockAddr	.//network/platform/win/SockAddr.cpp	/^SockAddr::~SockAddr()$/;"	f	class:kit::SockAddr	signature:()
~Socket	.//network/platform/win/Socket.cpp	/^Socket::~Socket()$/;"	f	class:kit::Socket	signature:()
~Thread	.//base/Thread.h	/^    virtual ~Thread();$/;"	p	class:kit::Thread	access:public	signature:()
